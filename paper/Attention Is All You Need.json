{
    "d253c4b2-38ff-4706-b2b3-62544fe834fe_add_child": false,
    "12ec6ed0-f7ff-403a-b61c-73174b2e81a7_add_sibling": false,
    "5314ec67-89bf-4764-a62c-b686af852b4a_add_sibling": false,
    "overall_assessment": {
        "research_topic": "\u8be5\u7814\u7a76\u4ecb\u7ecd\u4e86Transformer\u6a21\u578b\uff0c\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\uff0c\u6452\u5f03\u4e86\u4f20\u7edf\u7684\u5faa\u73af\u548c\u5377\u79ef\u7ed3\u6784\uff0c\u5728\u673a\u5668\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u53d6\u5f97\u4e86\u663e\u8457\u6210\u679c\u3002",
        "research_outcomes": "\u7814\u7a76\u7ed3\u679c\u8868\u660eTransformer\u6a21\u578b\u5728\u8d28\u91cf\u3001\u8bad\u7ec3\u6548\u7387\u548c\u6cdb\u5316\u80fd\u529b\u65b9\u9762\u4f18\u4e8e\u4f20\u7edf\u6a21\u578b\uff0c\u4e3a\u5e8f\u5217\u8f6c\u6362\u4efb\u52a1\u5e26\u6765\u65b0\u7684\u7a81\u7834\u3002",
        "dataset_description": "",
        "methodology": "\u7814\u7a76\u65b9\u6cd5\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\uff0c\u901a\u8fc7\u81ea\u6ce8\u610f\u529b\u5b9e\u73b0\u8f93\u5165\u548c\u8f93\u51fa\u8868\u793a\u7684\u8ba1\u7b97\uff0c\u907f\u514d\u4e86\u4f20\u7edf\u5faa\u73af\u548c\u5377\u79ef\u7684\u9650\u5236\uff0c\u63d0\u9ad8\u4e86\u5e76\u884c\u6027\u548c\u8bad\u7ec3\u6548\u7387\u3002",
        "innovations": "\u672c\u7814\u7a76\u7684\u521b\u65b0\u70b9\u5728\u4e8e\u63d0\u51fa\u4e86\u5b8c\u5168\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\u7684Transformer\u6a21\u578b\uff0c\u53d6\u5f97\u4e86\u5728\u673a\u5668\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u7684\u663e\u8457\u6539\u8fdb\u3002",
        "overall_writing_logic": "\u8bba\u6587\u7ed3\u6784\u6e05\u6670\uff0c\u903b\u8f91\u4e25\u8c28\uff0c\u4ece\u4ecb\u7ecd\u80cc\u666f\u5230\u6a21\u578b\u7ec6\u8282\u3001\u8bad\u7ec3\u8fc7\u7a0b\u548c\u5b9e\u9a8c\u7ed3\u679c\u90fd\u6709\u6761\u4e0d\u7d0a\u5730\u5c55\u5f00\u3002",
        "conclusions": "\u7efc\u5408\u8bc4\u4ef7\uff0c\u672c\u7814\u7a76\u5bf9\u5e8f\u5217\u8f6c\u6362\u4efb\u52a1\u7684\u53d1\u5c55\u5177\u6709\u91cd\u8981\u610f\u4e49\uff0c\u63d0\u51fa\u7684Transformer\u6a21\u578b\u5728\u6027\u80fd\u548c\u6548\u7387\u4e0a\u90fd\u6709\u663e\u8457\u63d0\u5347\uff0c\u5177\u6709\u5e7f\u9614\u7684\u5e94\u7528\u524d\u666f\u3002"
    },
    "title": "Attention Is All You Need",
    "abstract-area": "The dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder. The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring significantly\nless time to train. Our model achieves 28.4 BLEU on the WMT 2014 Englishto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.8 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature. We show that the Transformer generalizes well to\nother tasks by applying it successfully to English constituency parsing both with\nlarge and limited training data.",
    "d2d6bf28-9c68-4b74-be87-7a7415921680_texts": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[16], ByteNet [18] and ConvS2S [9], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes\nit more difficult to learn dependencies between distant positions [12]. In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\nSelf-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 27, 28, 22].\nEnd-to-end memory networks are based on a recurrent attention mechanism instead of sequencealigned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [34].\nTo the best of our knowledge, however, the Transformer is the first transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequencealigned RNNs or convolution. In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [17, 18] and [9]",
    "ce1fdeda-e1b8-45ec-a0ae-084e29586e7c_title": "Hardware and Schedule",
    "7a9b47e2-4e03-47fc-8aec-492940ae91ab_title": "Model Variations",
    "ce1fdeda-e1b8-45ec-a0ae-084e29586e7c_add_sibling": false,
    "introduction": "",
    "sections": [
        {
            "flag": true,
            "id": "d2d6bf28-9c68-4b74-be87-7a7415921680",
            "title": "Background",
            "texts": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[16], ByteNet [18] and ConvS2S [9], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes\nit more difficult to learn dependencies between distant positions [12]. In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\nSelf-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 27, 28, 22].\nEnd-to-end memory networks are based on a recurrent attention mechanism instead of sequencealigned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [34].\nTo the best of our knowledge, however, the Transformer is the first transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequencealigned RNNs or convolution. In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [17, 18] and [9]",
            "sections": []
        },
        {
            "flag": true,
            "id": "12ec6ed0-f7ff-403a-b61c-73174b2e81a7",
            "title": "Model Architecture",
            "texts": "Most competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 35].\nHere, the encoder maps an input sequence of symbol representations (x1, ..., xn) to a sequence\nof continuous representations z = (z1, ..., zn). Given z, the decoder then generates an output\nsequence (y1, ..., ym) of symbols one element at a time. At each step the model is auto-regressive\n[10], consuming the previously generated symbols as additional input when generating the next.\n",
            "sections": [
                {
                    "flag": true,
                    "id": "fc8a6d85-403f-4551-99f8-81b756e9bd5d",
                    "title": "Encoder and Decoder Stacks",
                    "texts": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection [11] around each of\nthe two sub-layers, followed by layer normalization [1]. That is, the output of each sub-layer is\nLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512.\nDecoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position i can depend only on the known outputs at positions less than i.",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "b3e608c0-fb3d-49f2-a553-4e93da694334",
                    "title": "Attention",
                    "texts": "An attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.",
                    "sections": [
                        {
                            "flag": true,
                            "id": "dfd8bf32-e2b8-45bf-867e-6701c9d1295e",
                            "title": "Scaled Dot-Product Attention",
                            "texts": "We call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). The input consists of\nqueries and keys of dimension dk, and values of dimension dv. We compute the dot products of the\nquery with all keys, divide each by \u221adk, and apply a softmax function to obtain the weights on the\nvalues.\nIn practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices K and V . We compute\nthe matrix of outputs as:\nAttention(Q, K, V ) = softmax(QK \u221adkT )V (1)\nThe two most commonly used attention functions are additive attention [2], and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor\nof \u221a1dk . Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-efficient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\nWhile for small values of dk the two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk [3]. We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients 4. To counteract this effect, we scale the dot products by \u221a1dk .",
                            "sections": []
                        },
                        {
                            "flag": true,
                            "id": "d253c4b2-38ff-4706-b2b3-62544fe834fe",
                            "title": "Multi-Head Attention",
                            "texts": "Instead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it beneficial to linearly project the queries, keys and values h times with different, learned\nlinear projections to dk, dk and dv dimensions, respectively. On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. These are concatenated and once again projected, resulting in the final values, as\ndepicted in Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.\nMultiHead(Q, K, V ) = Concat(head1, ..., headh)WO\nwhere headi = Attention(QWiQ, KWiK, V WiV )\nWhere the projections are parameter matrices WiQ \u2208 Rdmodel\u00d7dk, WiK \u2208 Rdmodel\u00d7dk, WiV \u2208 Rdmodel\u00d7dv\nand WO \u2208 Rhdv\u00d7dmodel.\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.",
                            "sections": []
                        },
                        {
                            "flag": true,
                            "id": "150706c0-4671-40c0-9ac7-40d6f6ff6bd9",
                            "title": "Applications of Attention in our Model",
                            "texts": "The Transformer uses multi-head attention in three different ways:\n\u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence. This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[38, 2, 9].\n\u2022 The encoder contains self-attention layers. In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n\u2022 Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. We need to prevent leftward\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. See Figure 2.",
                            "sections": []
                        }
                    ]
                },
                {
                    "flag": true,
                    "id": "6ae9eedf-e5fa-4161-8adf-a0830833084d",
                    "title": "Position-wise Feed-Forward Networks",
                    "texts": "In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a ReLU activation in between.\nFFN(x) = max(0, xW1 + b1)W2 + b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\ndff = 2048.",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "01ef2da7-d53f-435a-89ec-5626cfa7adb6",
                    "title": "Embeddings and Softmax",
                    "texts": "Similarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [30]. In the embedding layers, we multiply those weights by \u221admodel.\n",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "499cfaf8-be29-409d-a9d4-0ed0010ccb24",
                    "title": "Positional Encoding",
                    "texts": "Since our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the\nbottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. There are many choices of positional encodings,\nlearned and fixed [9].\nIn this work, we use sine and cosine functions of different frequencies:\nP E(pos,2i) = sin(pos/100002i/dmodel)\nP E(pos,2i+1) = cos(pos/100002i/dmodel)\nwhere pos is the position and i is the dimension. That is, each dimension of the positional encoding\ncorresponds to a sinusoid. The wavelengths form a geometric progression from 2\u03c0 to 10000 \u00b7 2\u03c0. We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any fixed offset k, P Epos+k can be represented as a linear function of\nP E\npos.\nWe also experimented with using learned positional embeddings [9] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training",
                    "sections": []
                }
            ]
        },
        {
            "flag": true,
            "id": "9a320189-5397-4731-b125-0832b9962cd2",
            "title": "Why Self-Attention",
            "texts": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1, ..., xn) to another sequence of equal length (z1, ..., zn), with xi, zi \u2208 Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we\nconsider three desiderata.\nOne is the total computational complexity per layer. Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\nThe third is the path length between long-range dependencies in the network. Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [12]. Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\nAs noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n) sequential operations. In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\n",
            "sections": []
        },
        {
            "flag": true,
            "id": "651fe7c7-d25e-4ad9-87db-7136b645ff5c",
            "title": "Training",
            "texts": "This section describes the training regime for our models.",
            "sections": [
                {
                    "flag": true,
                    "id": "2bcc9650-c262-4e90-918a-e45846ba47c2",
                    "title": "Training Data and Batching",
                    "texts": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. Sentences were encoded using byte-pair encoding [3], which has a shared sourcetarget vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [38]. Sentence pairs were batched together by approximate sequence length. Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "ce1fdeda-e1b8-45ec-a0ae-084e29586e7c",
                    "title": "Hardware and Schedule",
                    "texts": "We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. We\ntrained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps\n(3.5 days).",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "3a8dc153-4a94-40f8-af6c-c7e70c29c246",
                    "title": "Optimizer",
                    "texts": "We used the Adam optimizer [20] with \u03b21 = 0.9, \u03b22 = 0.98 and \u03f5 = 10\u22129. We varied the learning\nrate over the course of training, according to the formula:\nlrate = d\u22120.5\nmodel \u00b7 min(step_num\u22120.5, step_num \u00b7 warmup_steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the first warmup_steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. We used\nwarmup_steps = 4000.",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "5314ec67-89bf-4764-a62c-b686af852b4a",
                    "title": "Regularization",
                    "texts": "We employ three types of regularization during training:\nResidual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\nPdrop = 0.1.\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls = 0.1 [36]. This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.",
                    "sections": []
                }
            ]
        },
        {
            "flag": true,
            "id": "54f21048-6d63-4411-b3ea-7cc3b8d0fc40",
            "title": "Results",
            "texts": "",
            "sections": [
                {
                    "flag": true,
                    "id": "376910db-02e6-4c63-94b7-4d99e5a536fa",
                    "title": "Machine Translation",
                    "texts": "On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop = 0.1, instead of 0.3.\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nused beam search with a beam size of 4 and length penalty \u03b1 = 0.6 [38]. These hyperparameters\nwere chosen after experimentation on the development set. We set the maximum output length during\ninference to input length + 50, but terminate early when possible [38].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. We estimate the number of floating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision floating-point capacity of each GPU 5.",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "7a9b47e2-4e03-47fc-8aec-492940ae91ab",
                    "title": "Model Variations",
                    "texts": "To evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. We used beam search as described in the previous section, but no\ncheckpoint averaging. We present these results in Table 3.\nIn Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\nIn Table 3 rows (B), we observe that reducing the attention key size dk hurts model quality. This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [9], and observe nearly identical\nresults to the base model.",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "2e6f7c77-ac38-4204-a7fe-9d0e97c3f841",
                    "title": "English Constituency Parsing",
                    "texts": "To evaluate if the Transformer can generalize to other tasks we performed experiments on English\nconstituency parsing. This task presents specific challenges: the output is subject to strong structural\nconstraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence\nmodels have not been able to attain state-of-the-art results in small-data regimes [37].\nWe trained a 4-layer transformer with dmodel = 1024 on the Wall Street Journal (WSJ) portion of the\nPenn Treebank [25], about 40K training sentences. We also trained it in a semi-supervised setting,\nusing the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences\n[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens\nfor the semi-supervised setting.\nWe performed only a small number of experiments to select the dropout, both attention and residual\n(section 5.4), learning rates and beam size on the Section 22 development set, all other parameters\nremained unchanged from the English-to-German base translation model. During inference, we\nincreased the maximum output length to input length + 300. We used a beam size of 21 and \u03b1 = 0.3\nfor both WSJ only and the semi-supervised setting.\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the\nRecurrent Neural Network Grammar [8].\nIn contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the BerkeleyParser [29] even when training only on the WSJ training set of 40K sentences.",
                    "sections": []
                }
            ]
        },
        {
            "flag": true,
            "id": "7feb6a67-87ba-4c5a-90bb-b944ba12823c",
            "title": "Conclusion",
            "texts": "In this work, we presented the Transformer, the first sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\nFor translation tasks, the Transformer can be trained significantly faster than architectures based\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor.\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.",
            "sections": []
        }
    ],
    "eca01c98-da2a-4427-a8f3-4accb6bbda06_title_change": "",
    "499cfaf8-be29-409d-a9d4-0ed0010ccb24_texts": "Since our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the\nbottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. There are many choices of positional encodings,\nlearned and fixed [9].\nIn this work, we use sine and cosine functions of different frequencies:\nP E(pos,2i) = sin(pos/100002i/dmodel)\nP E(pos,2i+1) = cos(pos/100002i/dmodel)\nwhere pos is the position and i is the dimension. That is, each dimension of the positional encoding\ncorresponds to a sinusoid. The wavelengths form a geometric progression from 2\u03c0 to 10000 \u00b7 2\u03c0. We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any fixed offset k, P Epos+k can be represented as a linear function of\nP E\npos.\nWe also experimented with using learned positional embeddings [9] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training",
    "introduction_processed": "Recurrent neural networks, long short-term memory and gated recurrent neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures. Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden states $h_t$, as a function of the previous hidden state $h_{t-1}$ and the input for position $t$. This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples. Recent work has achieved significant improvements in computational efficiency through factorization tricks and conditional computation, while also improving model performance in case of the latter. The fundamental constraint of sequential computation, however, remains. Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences. In all but a few cases, however, such attention mechanisms are used in conjunction with a recurrent network. In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs.",
    "7a9b47e2-4e03-47fc-8aec-492940ae91ab_texts": "To evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. We used beam search as described in the previous section, but no\ncheckpoint averaging. We present these results in Table 3.\nIn Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\nIn Table 3 rows (B), we observe that reducing the attention key size dk hurts model quality. This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [9], and observe nearly identical\nresults to the base model.",
    "dfd8bf32-e2b8-45bf-867e-6701c9d1295e_title": "Scaled Dot-Product Attention",
    "3a8dc153-4a94-40f8-af6c-c7e70c29c246_add_child": false,
    "ce1fdeda-e1b8-45ec-a0ae-084e29586e7c_title_change": "Hardware and Schedule",
    "499cfaf8-be29-409d-a9d4-0ed0010ccb24_title": "Positional Encoding",
    "376910db-02e6-4c63-94b7-4d99e5a536fa_add_child": false,
    "d253c4b2-38ff-4706-b2b3-62544fe834fe_title": "Multi-Head Attention",
    "2bcc9650-c262-4e90-918a-e45846ba47c2_texts_change": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. Sentences were encoded using byte-pair encoding [3], which has a shared sourcetarget vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [38]. Sentence pairs were batched together by approximate sequence length. Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.",
    "d253c4b2-38ff-4706-b2b3-62544fe834fe_add_sibling": false,
    "5314ec67-89bf-4764-a62c-b686af852b4a_texts_change": "We employ three types of regularization during training:\nResidual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\nPdrop = 0.1.\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls = 0.1 [36]. This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.",
    "9a320189-5397-4731-b125-0832b9962cd2_title_change": "Why Self-Attention",
    "9a320189-5397-4731-b125-0832b9962cd2_title": "Why Self-Attention",
    "150706c0-4671-40c0-9ac7-40d6f6ff6bd9_add_sibling": false,
    "dfd8bf32-e2b8-45bf-867e-6701c9d1295e_texts_change": "We call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). The input consists of\nqueries and keys of dimension dk, and values of dimension dv. We compute the dot products of the\nquery with all keys, divide each by \u221adk, and apply a softmax function to obtain the weights on the\nvalues.\nIn practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices K and V . We compute\nthe matrix of outputs as:\nAttention(Q, K, V ) = softmax(QK \u221adkT )V (1)\nThe two most commonly used attention functions are additive attention [2], and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor\nof \u221a1dk . Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-efficient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\nWhile for small values of dk the two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk [3]. We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients 4. To counteract this effect, we scale the dot products by \u221a1dk .",
    "publication": "Arxiv",
    "institutes": "Google Brain, Google Research, University of Toronto",
    "54f21048-6d63-4411-b3ea-7cc3b8d0fc40_texts": "",
    "ce1fdeda-e1b8-45ec-a0ae-084e29586e7c_texts": "We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. We\ntrained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps\n(3.5 days).",
    "499cfaf8-be29-409d-a9d4-0ed0010ccb24_add_child": false,
    "d2d6bf28-9c68-4b74-be87-7a7415921680_add_sibling": false,
    "376910db-02e6-4c63-94b7-4d99e5a536fa_title_change": "Machine Translation",
    "01ef2da7-d53f-435a-89ec-5626cfa7adb6_delete": false,
    "5314ec67-89bf-4764-a62c-b686af852b4a_title_change": "Regularization",
    "54f21048-6d63-4411-b3ea-7cc3b8d0fc40_add_sibling": false,
    "b3e608c0-fb3d-49f2-a553-4e93da694334_add_child": false,
    "6ae9eedf-e5fa-4161-8adf-a0830833084d_title_change": "Position-wise Feed-Forward Networks",
    "01ef2da7-d53f-435a-89ec-5626cfa7adb6_texts_change": "Similarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [30]. In the embedding layers, we multiply those weights by \u221admodel.\n",
    "7feb6a67-87ba-4c5a-90bb-b944ba12823c_delete": false,
    "01ef2da7-d53f-435a-89ec-5626cfa7adb6_add_child": false,
    "5314ec67-89bf-4764-a62c-b686af852b4a_texts": "We employ three types of regularization during training:\nResidual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\nPdrop = 0.1.\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls = 0.1 [36]. This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.",
    "12ec6ed0-f7ff-403a-b61c-73174b2e81a7_delete": false,
    "9a320189-5397-4731-b125-0832b9962cd2_texts": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1, ..., xn) to another sequence of equal length (z1, ..., zn), with xi, zi \u2208 Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we\nconsider three desiderata.\nOne is the total computational complexity per layer. Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\nThe third is the path length between long-range dependencies in the network. Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [12]. Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\nAs noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n) sequential operations. In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\n",
    "b3e608c0-fb3d-49f2-a553-4e93da694334_add_sibling": false,
    "d2d6bf28-9c68-4b74-be87-7a7415921680_title_change": "Background",
    "7a9b47e2-4e03-47fc-8aec-492940ae91ab_add_sibling": false,
    "publication-area": "Arxiv",
    "institutes-area": "Google Brain, Google Research, University of Toronto",
    "3a8dc153-4a94-40f8-af6c-c7e70c29c246_delete": false,
    "9a320189-5397-4731-b125-0832b9962cd2_add_child": false,
    "376910db-02e6-4c63-94b7-4d99e5a536fa_title": "Machine Translation",
    "authors-area": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, \u0141ukasz Kaiser",
    "3a8dc153-4a94-40f8-af6c-c7e70c29c246_title_change": "Optimizer",
    "5314ec67-89bf-4764-a62c-b686af852b4a_add_child": false,
    "d253c4b2-38ff-4706-b2b3-62544fe834fe_texts_change": "Instead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it beneficial to linearly project the queries, keys and values h times with different, learned\nlinear projections to dk, dk and dv dimensions, respectively. On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. These are concatenated and once again projected, resulting in the final values, as\ndepicted in Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.\nMultiHead(Q, K, V ) = Concat(head1, ..., headh)WO\nwhere headi = Attention(QWiQ, KWiK, V WiV )\nWhere the projections are parameter matrices WiQ \u2208 Rdmodel\u00d7dk, WiK \u2208 Rdmodel\u00d7dk, WiV \u2208 Rdmodel\u00d7dv\nand WO \u2208 Rhdv\u00d7dmodel.\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.",
    "d2d6bf28-9c68-4b74-be87-7a7415921680_title": "Background",
    "3a8dc153-4a94-40f8-af6c-c7e70c29c246_texts_change": "We used the Adam optimizer [20] with \u03b21 = 0.9, \u03b22 = 0.98 and \u03f5 = 10\u22129. We varied the learning\nrate over the course of training, according to the formula:\nlrate = d\u22120.5\nmodel \u00b7 min(step_num\u22120.5, step_num \u00b7 warmup_steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the first warmup_steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. We used\nwarmup_steps = 4000.",
    "6ae9eedf-e5fa-4161-8adf-a0830833084d_texts": "In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a ReLU activation in between.\nFFN(x) = max(0, xW1 + b1)W2 + b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\ndff = 2048.",
    "7a9b47e2-4e03-47fc-8aec-492940ae91ab_texts_change": "To evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. We used beam search as described in the previous section, but no\ncheckpoint averaging. We present these results in Table 3.\nIn Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\nIn Table 3 rows (B), we observe that reducing the attention key size dk hurts model quality. This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [9], and observe nearly identical\nresults to the base model.",
    "2bcc9650-c262-4e90-918a-e45846ba47c2_texts": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. Sentences were encoded using byte-pair encoding [3], which has a shared sourcetarget vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [38]. Sentence pairs were batched together by approximate sequence length. Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.",
    "d253c4b2-38ff-4706-b2b3-62544fe834fe_delete": false,
    "keywords-area": "",
    "fc8a6d85-403f-4551-99f8-81b756e9bd5d_title_change": "Encoder and Decoder Stacks",
    "b3e608c0-fb3d-49f2-a553-4e93da694334_texts_change": "An attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.",
    "publish_time": "2023.8.2",
    "section_summaries": {
        "0": "\u6458\u8981\u4ecb\u7ecd\u4e86Transformer\u6a21\u578b\uff0c\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\uff0c\u6452\u5f03\u4e86\u5faa\u73af\u548c\u5377\u79ef\uff0c\u5728\u673a\u5668\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u8868\u73b0\u4f18\u8d8a\u3002",
        "1": "\u4ecb\u7ecd\u4e86\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u548c\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u5728\u5e8f\u5217\u5efa\u6a21\u548c\u8f6c\u6362\u95ee\u9898\u4e2d\u7684\u5e94\u7528\uff0c\u63d0\u51fa\u4e86Transformer\u6a21\u578b\uff0c\u5b8c\u5168\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\uff0c\u5b9e\u73b0\u66f4\u9ad8\u7684\u5e76\u884c\u5316\u548c\u7ffb\u8bd1\u8d28\u91cf\u3002",
        "2": "\u8ba8\u8bba\u4e86\u51cf\u5c11\u987a\u5e8f\u8ba1\u7b97\u7684\u76ee\u6807\uff0c\u4ecb\u7ecd\u4e86Extended Neural GPU\u3001ByteNet\u548cConvS2S\u7b49\u6a21\u578b\uff0c\u6307\u51faTransformer\u901a\u8fc7\u81ea\u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u8f93\u5165\u548c\u8f93\u51fa\u7684\u8868\u793a\u8ba1\u7b97\uff0c\u907f\u514d\u4e86\u5e8f\u5217\u5bf9\u9f50\u7684RNN\u6216\u5377\u79ef\u3002",
        "3": "\u63cf\u8ff0\u4e86Transformer\u7684\u6a21\u578b\u67b6\u6784\uff0c\u5305\u62ec\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5806\u53e0\u3001\u6ce8\u610f\u529b\u673a\u5236\u3001\u4f4d\u7f6e\u9010\u5c42\u524d\u9988\u7f51\u7edc\u3001\u5d4c\u5165\u548cSoftmax\u3001\u4f4d\u7f6e\u7f16\u7801\u7b49\u3002",
        "3.1": "\u4ecb\u7ecd\u4e86\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5806\u53e0\u7684\u7ed3\u6784\uff0c\u5305\u62ec\u81ea\u6ce8\u610f\u529b\u673a\u5236\u548c\u524d\u9988\u7f51\u7edc\u3002",
        "3.2": "\u8be6\u7ec6\u8ba8\u8bba\u4e86\u6ce8\u610f\u529b\u673a\u5236\uff0c\u5305\u62ec\u7f29\u653e\u70b9\u79ef\u6ce8\u610f\u529b\u548c\u591a\u5934\u6ce8\u610f\u529b\u7684\u5e94\u7528\u3002",
        "3.2.1": "\u4ecb\u7ecd\u4e86\u7f29\u653e\u70b9\u79ef\u6ce8\u610f\u529b\u7684\u8ba1\u7b97\u65b9\u5f0f\u548c\u6027\u80fd\u6bd4\u8f83\u3002",
        "3.2.2": "\u8ba8\u8bba\u4e86\u591a\u5934\u6ce8\u610f\u529b\u7684\u4f18\u52bf\u548c\u5e94\u7528\u3002",
        "3.2.3": "\u8bf4\u660e\u4e86Transformer\u4e2d\u591a\u5934\u6ce8\u610f\u529b\u7684\u4e09\u79cd\u5e94\u7528\u65b9\u5f0f\u3002",
        "3.3": "\u63cf\u8ff0\u4e86\u4f4d\u7f6e\u9010\u5c42\u524d\u9988\u7f51\u7edc\u7684\u7ed3\u6784\u548c\u4f5c\u7528\u3002",
        "3.4": "\u4ecb\u7ecd\u4e86\u5d4c\u5165\u548cSoftmax\u7684\u4f7f\u7528\uff0c\u5305\u62ec\u6743\u91cd\u5171\u4eab\u548c\u5d4c\u5165\u5c42\u7684\u5904\u7406\u3002",
        "3.5": "\u8ba8\u8bba\u4e86\u4f4d\u7f6e\u7f16\u7801\u7684\u91cd\u8981\u6027\u548c\u91c7\u7528\u7684\u65b9\u6cd5\uff0c\u5305\u62ec\u6b63\u5f26\u548c\u4f59\u5f26\u51fd\u6570\u7684\u5e94\u7528\u3002",
        "4": "\u6bd4\u8f83\u4e86\u81ea\u6ce8\u610f\u529b\u5c42\u4e0e\u5e38\u7528\u7684\u5faa\u73af\u548c\u5377\u79ef\u5c42\u5728\u5e8f\u5217\u8f6c\u6362\u4e2d\u7684\u5404\u4e2a\u65b9\u9762\uff0c\u6307\u51fa\u81ea\u6ce8\u610f\u529b\u5c42\u5728\u8ba1\u7b97\u590d\u6742\u5ea6\u3001\u5e76\u884c\u8ba1\u7b97\u548c\u957f\u8ddd\u79bb\u4f9d\u8d56\u8def\u5f84\u957f\u5ea6\u7b49\u65b9\u9762\u7684\u4f18\u52bf\u3002",
        "5": "\u63cf\u8ff0\u4e86\u6a21\u578b\u7684\u8bad\u7ec3\u8fc7\u7a0b\uff0c\u5305\u62ec\u8bad\u7ec3\u6570\u636e\u548c\u6279\u5904\u7406\u3001\u786c\u4ef6\u548c\u8bad\u7ec3\u8ba1\u5212\u3001\u4f18\u5316\u5668\u548c\u6b63\u5219\u5316\u7b49\u3002",
        "5.1": "\u4ecb\u7ecd\u4e86\u8bad\u7ec3\u6570\u636e\u548c\u6279\u5904\u7406\u7684\u7ec6\u8282\u3002",
        "5.2": "\u63cf\u8ff0\u4e86\u786c\u4ef6\u914d\u7f6e\u548c\u8bad\u7ec3\u8ba1\u5212\uff0c\u5305\u62ec\u57fa\u7840\u6a21\u578b\u548c\u5927\u6a21\u578b\u7684\u8bad\u7ec3\u65f6\u95f4\u3002",
        "5.3": "\u8ba8\u8bba\u4e86\u4f18\u5316\u5668\u7684\u9009\u62e9\u548c\u5b66\u4e60\u7387\u8c03\u6574\u7b56\u7565\u3002",
        "5.4": "\u8bf4\u660e\u4e86\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u91c7\u7528\u7684\u4e09\u79cd\u6b63\u5219\u5316\u65b9\u6cd5\u3002",
        "6": "\u5c55\u793a\u4e86Transformer\u5728\u673a\u5668\u7ffb\u8bd1\u548c\u82f1\u8bed\u6210\u5206\u5206\u6790\u4efb\u52a1\u4e0a\u7684\u7ed3\u679c\uff0c\u5305\u62ec\u6a21\u578b\u6027\u80fd\u3001\u53d8\u4f53\u6a21\u578b\u7684\u5f71\u54cd\u548c\u6cdb\u5316\u80fd\u529b\u3002",
        "6.1": "\u4ecb\u7ecd\u4e86\u673a\u5668\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u7684\u7ed3\u679c\uff0c\u5305\u62ec\u6a21\u578b\u6027\u80fd\u548c\u8bad\u7ec3\u6210\u672c\u7684\u6bd4\u8f83\u3002",
        "6.2": "\u8bc4\u4f30\u4e86Transformer\u4e0d\u540c\u7ec4\u4ef6\u7684\u91cd\u8981\u6027\uff0c\u8ba8\u8bba\u4e86\u6a21\u578b\u53d8\u4f53\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u3002",
        "6.3": "\u5c55\u793a\u4e86Transformer\u5728\u82f1\u8bed\u6210\u5206\u5206\u6790\u4efb\u52a1\u4e0a\u7684\u8868\u73b0\uff0c\u8bc1\u660e\u4e86\u5176\u6cdb\u5316\u80fd\u529b\u548c\u4f18\u8d8a\u6027\u3002",
        "7": "\u603b\u7ed3\u4e86Transformer\u6a21\u578b\u7684\u8d21\u732e\u548c\u672a\u6765\u5c55\u671b\uff0c\u5f3a\u8c03\u4e86\u57fa\u4e8e\u6ce8\u610f\u529b\u7684\u6a21\u578b\u7684\u6f5c\u529b\u548c\u6269\u5c55\u65b9\u5411\u3002"
    },
    "12ec6ed0-f7ff-403a-b61c-73174b2e81a7_title_change": "Model Architecture",
    "b3e608c0-fb3d-49f2-a553-4e93da694334_texts": "An attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.",
    "3a8dc153-4a94-40f8-af6c-c7e70c29c246_add_sibling": false,
    "5314ec67-89bf-4764-a62c-b686af852b4a_title": "Regularization",
    "title-area": "Attention Is All You Need",
    "7feb6a67-87ba-4c5a-90bb-b944ba12823c_add_sibling": false,
    "abstract": "",
    "fc8a6d85-403f-4551-99f8-81b756e9bd5d_add_child": false,
    "499cfaf8-be29-409d-a9d4-0ed0010ccb24_title_change": "Positional Encoding",
    "2e6f7c77-ac38-4204-a7fe-9d0e97c3f841_texts": "To evaluate if the Transformer can generalize to other tasks we performed experiments on English\nconstituency parsing. This task presents specific challenges: the output is subject to strong structural\nconstraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence\nmodels have not been able to attain state-of-the-art results in small-data regimes [37].\nWe trained a 4-layer transformer with dmodel = 1024 on the Wall Street Journal (WSJ) portion of the\nPenn Treebank [25], about 40K training sentences. We also trained it in a semi-supervised setting,\nusing the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences\n[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens\nfor the semi-supervised setting.\nWe performed only a small number of experiments to select the dropout, both attention and residual\n(section 5.4), learning rates and beam size on the Section 22 development set, all other parameters\nremained unchanged from the English-to-German base translation model. During inference, we\nincreased the maximum output length to input length + 300. We used a beam size of 21 and \u03b1 = 0.3\nfor both WSJ only and the semi-supervised setting.\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the\nRecurrent Neural Network Grammar [8].\nIn contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the BerkeleyParser [29] even when training only on the WSJ training set of 40K sentences.",
    "376910db-02e6-4c63-94b7-4d99e5a536fa_texts_change": "On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop = 0.1, instead of 0.3.\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nused beam search with a beam size of 4 and length penalty \u03b1 = 0.6 [38]. These hyperparameters\nwere chosen after experimentation on the development set. We set the maximum output length during\ninference to input length + 50, but terminate early when possible [38].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. We estimate the number of floating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision floating-point capacity of each GPU 5.",
    "01ef2da7-d53f-435a-89ec-5626cfa7adb6_texts": "Similarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [30]. In the embedding layers, we multiply those weights by \u221admodel.\n",
    "ce1fdeda-e1b8-45ec-a0ae-084e29586e7c_texts_change": "We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. We\ntrained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps\n(3.5 days).",
    "abstract_processed": "The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves $28.4$ BLEU on the WMT 2014 English-to-German translation task, improving over the existing best results, including ensembles, by over $2$ BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of $41.8$ after training for $3.5$ days on eight GPUs, a small fraction of the training costs of the best models from the literature. We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data.",
    "2e6f7c77-ac38-4204-a7fe-9d0e97c3f841_add_child": false,
    "2bcc9650-c262-4e90-918a-e45846ba47c2_add_sibling": false,
    "7feb6a67-87ba-4c5a-90bb-b944ba12823c_title": "Conclusion",
    "150706c0-4671-40c0-9ac7-40d6f6ff6bd9_texts": "The Transformer uses multi-head attention in three different ways:\n\u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence. This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[38, 2, 9].\n\u2022 The encoder contains self-attention layers. In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n\u2022 Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. We need to prevent leftward\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. See Figure 2.",
    "9a320189-5397-4731-b125-0832b9962cd2_add_sibling": false,
    "d253c4b2-38ff-4706-b2b3-62544fe834fe_texts": "Instead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it beneficial to linearly project the queries, keys and values h times with different, learned\nlinear projections to dk, dk and dv dimensions, respectively. On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. These are concatenated and once again projected, resulting in the final values, as\ndepicted in Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.\nMultiHead(Q, K, V ) = Concat(head1, ..., headh)WO\nwhere headi = Attention(QWiQ, KWiK, V WiV )\nWhere the projections are parameter matrices WiQ \u2208 Rdmodel\u00d7dk, WiK \u2208 Rdmodel\u00d7dk, WiV \u2208 Rdmodel\u00d7dv\nand WO \u2208 Rhdv\u00d7dmodel.\nIn this work we employ h = 8 parallel attention layers, or heads. For each of these we use\ndk = dv = dmodel/h = 64. Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.",
    "150706c0-4671-40c0-9ac7-40d6f6ff6bd9_title_change": "Applications of Attention in our Model",
    "introduction-area": "Recurrent neural networks, long short-term memory [13] and gated recurrent [7] neural networks\nin particular, have been firmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [35, 2, 5]. Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [38, 24, 15].\nRecurrent models typically factor computation along the symbol positions of the input and output\nsequences. Aligning the positions to steps in computation time, they generate a sequence of hidden\nstates ht, as a function of the previous hidden state ht\u22121 and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. Recent work has achieved\nsignificant improvements in computational efficiency through factorization tricks [21] and conditional\ncomputation [32], while also improving model performance in case of the latter. The fundamental\nconstraint of sequential computation, however, remains.\nAttention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [2, 19]. In all but a few cases [27], however, such attention mechanisms\nare used in conjunction with a recurrent network.\nIn this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\nThe Transformer allows for significantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.",
    "2e6f7c77-ac38-4204-a7fe-9d0e97c3f841_title": "English Constituency Parsing",
    "zh_sections_processed": [
        {
            "flag": true,
            "id": "d2d6bf28-9c68-4b74-be87-7a7415921680",
            "title": "\u80cc\u666f",
            "texts": "\u51cf\u5c11\u987a\u5e8f\u8ba1\u7b97\u7684\u76ee\u6807\u4e5f\u6784\u6210\u4e86Extended Neural GPU\uff0816\uff09\uff0cByteNet\uff0818\uff09\u548cConvS2S\uff089\uff09\u7684\u57fa\u7840\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4f5c\u4e3a\u57fa\u672c\u6784\u5efa\u6a21\u5757\uff0c\u4e3a\u6240\u6709\u8f93\u5165\u548c\u8f93\u51fa\u4f4d\u7f6e\u5e76\u884c\u8ba1\u7b97\u9690\u85cf\u8868\u793a\u3002\u5728\u8fd9\u4e9b\u6a21\u578b\u4e2d\uff0c\u4ece\u4e24\u4e2a\u4efb\u610f\u8f93\u5165\u6216\u8f93\u51fa\u4f4d\u7f6e\u5173\u8054\u4fe1\u53f7\u6240\u9700\u7684\u64cd\u4f5c\u6570\u91cf\u968f\u7740\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8ddd\u79bb\u589e\u52a0\u800c\u589e\u957f\uff0c\u5bf9\u4e8eConvS2S\u662f\u7ebf\u6027\u589e\u957f\uff0c\u5bf9\u4e8eByteNet\u662f\u5bf9\u6570\u589e\u957f\u3002\u8fd9\u4f7f\u5f97\u5b66\u4e60\u8fdc\u8ddd\u79bb\u4f4d\u7f6e\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\u5728Transformer\u4e2d\uff0c\u8fd9\u88ab\u51cf\u5c11\u4e3a\u4e00\u5b9a\u6570\u91cf\u7684\u64cd\u4f5c\uff0c\u5c3d\u7ba1\u7531\u4e8e\u5bf9\u6ce8\u610f\u529b\u52a0\u6743\u4f4d\u7f6e\u8fdb\u884c\u5e73\u5747\u800c\u5bfc\u81f4\u6709\u6548\u5206\u8fa8\u7387\u964d\u4f4e\uff0c\u6211\u4eec\u901a\u8fc7\u7b2c3.2\u8282\u4e2d\u63cf\u8ff0\u7684\u591a\u5934\u6ce8\u610f\u529b\u6765\u62b5\u6d88\u8fd9\u79cd\u5f71\u54cd\u3002\n\u81ea\u6ce8\u610f\u529b\uff0c\u6709\u65f6\u79f0\u4e3a\u5185\u90e8\u6ce8\u610f\u529b\uff0c\u662f\u4e00\u79cd\u6ce8\u610f\u673a\u5236\uff0c\u5b83\u5173\u8054\u5355\u4e2a\u5e8f\u5217\u7684\u4e0d\u540c\u4f4d\u7f6e\uff0c\u4ee5\u8ba1\u7b97\u5e8f\u5217\u7684\u8868\u793a\u3002\u81ea\u6ce8\u610f\u529b\u5df2\u6210\u529f\u5e94\u7528\u4e8e\u5404\u79cd\u4efb\u52a1\uff0c\u5305\u62ec\u9605\u8bfb\u7406\u89e3\uff0c\u62bd\u8c61\u603b\u7ed3\uff0c\u6587\u672c\u8574\u6db5\u548c\u5b66\u4e60\u4efb\u52a1\u72ec\u7acb\u7684\u53e5\u5b50\u8868\u793a\u3002\u7aef\u5230\u7aef\u8bb0\u5fc6\u7f51\u7edc\u57fa\u4e8e\u5faa\u73af\u6ce8\u610f\u673a\u5236\uff0c\u800c\u4e0d\u662f\u5e8f\u5217\u5bf9\u9f50\u7684\u5faa\u73af\uff0c\u5e76\u4e14\u5df2\u88ab\u8bc1\u660e\u5728\u7b80\u5355\u8bed\u8a00\u95ee\u7b54\u548c\u8bed\u8a00\u5efa\u6a21\u4efb\u52a1\u4e0a\u8868\u73b0\u826f\u597d\u3002\n\u636e\u6211\u4eec\u6240\u77e5\uff0c\u7136\u800c\uff0cTransformer\u662f\u7b2c\u4e00\u4e2a\u5b8c\u5168\u4f9d\u8d56\u81ea\u6ce8\u610f\u529b\u6765\u8ba1\u7b97\u5176\u8f93\u5165\u548c\u8f93\u51fa\u8868\u793a\u7684\u4f20\u5bfc\u6a21\u578b\uff0c\u800c\u4e0d\u4f7f\u7528\u5e8f\u5217\u5bf9\u9f50\u7684RNN\u6216\u5377\u79ef\u3002\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u63cf\u8ff0Transformer\uff0c\u6fc0\u52b1\u81ea\u6ce8\u610f\u529b\uff0c\u5e76\u8ba8\u8bba\u5176\u4f18\u52bf\uff0c\u4ee5\u53ca\u4e0e\u8bf8\u5982\u7684\u6a21\u578b\u76f8\u6bd4\u3002",
            "sections": []
        },
        {
            "flag": true,
            "id": "12ec6ed0-f7ff-403a-b61c-73174b2e81a7",
            "title": "\u6a21\u578b\u67b6\u6784",
            "texts": "\u5927\u591a\u6570\u7ade\u4e89\u6027\u795e\u7ecf\u5e8f\u5217\u8f6c\u5bfc\u6a21\u578b\u5177\u6709\u7f16\u7801\u5668-\u89e3\u7801\u5668\u7ed3\u6784\u3002\u5728\u8fd9\u91cc\uff0c\u7f16\u7801\u5668\u5c06\u7b26\u53f7\u8868\u793a\u7684\u8f93\u5165\u5e8f\u5217$(x_1, ..., x_n)$\u6620\u5c04\u5230\u8fde\u7eed\u8868\u793a\u7684\u5e8f\u5217$z = (z_1, ..., z_n)$\u3002\u7ed9\u5b9a$z$\uff0c\u89e3\u7801\u5668\u9010\u4e2a\u5143\u7d20\u5730\u751f\u6210\u7b26\u53f7\u8f93\u51fa\u5e8f\u5217$(y_1, ..., y_m)$\u3002\u5728\u6bcf\u4e00\u6b65\u4e2d\uff0c\u6a21\u578b\u662f\u81ea\u56de\u5f52\u7684\uff0c\u5728\u751f\u6210\u4e0b\u4e00\u4e2a\u7b26\u53f7\u65f6\uff0c\u4f1a\u6d88\u8017\u5148\u524d\u751f\u6210\u7684\u7b26\u53f7\u4f5c\u4e3a\u989d\u5916\u8f93\u5165\u3002",
            "sections": [
                {
                    "flag": true,
                    "id": "fc8a6d85-403f-4551-99f8-81b756e9bd5d",
                    "title": "\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5806\u6808",
                    "texts": "\u7f16\u7801\u5668\uff1a\u7f16\u7801\u5668\u7531$N = 6$\u4e2a\u76f8\u540c\u7684\u5c42\u5806\u53e0\u800c\u6210\u3002\u6bcf\u4e2a\u5c42\u5305\u542b\u4e24\u4e2a\u5b50\u5c42\u3002\u7b2c\u4e00\u4e2a\u662f\u591a\u5934\u81ea\u6ce8\u610f\u529b\u673a\u5236\uff0c\u7b2c\u4e8c\u4e2a\u662f\u7b80\u5355\u7684\u4f4d\u7f6e\u9010\u70b9\u5168\u8fde\u63a5\u524d\u9988\u7f51\u7edc\u3002\u6211\u4eec\u5728\u6bcf\u4e2a\u5b50\u5c42\u5468\u56f4\u91c7\u7528\u6b8b\u5dee\u8fde\u63a5\uff0c\u7136\u540e\u8fdb\u884c\u5c42\u5f52\u4e00\u5316\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a\u5b50\u5c42\u7684\u8f93\u51fa\u662f$LayerNorm(x + Sublayer(x))$\uff0c\u5176\u4e2d$Sublayer(x)$\u662f\u5b50\u5c42\u672c\u8eab\u5b9e\u73b0\u7684\u51fd\u6570\u3002\u4e3a\u4e86\u4fc3\u8fdb\u8fd9\u4e9b\u6b8b\u5dee\u8fde\u63a5\uff0c\u6a21\u578b\u4e2d\u7684\u6240\u6709\u5b50\u5c42\u4ee5\u53ca\u5d4c\u5165\u5c42\u4ea7\u751f\u7ef4\u5ea6\u4e3a$d_{\\text{model}} = 512$\u7684\u8f93\u51fa\u3002\n\n\u89e3\u7801\u5668\uff1a\u89e3\u7801\u5668\u4e5f\u7531$N = 6$\u4e2a\u76f8\u540c\u7684\u5c42\u5806\u53e0\u800c\u6210\u3002\u9664\u4e86\u6bcf\u4e2a\u7f16\u7801\u5668\u5c42\u4e2d\u7684\u4e24\u4e2a\u5b50\u5c42\u5916\uff0c\u89e3\u7801\u5668\u8fd8\u63d2\u5165\u7b2c\u4e09\u4e2a\u5b50\u5c42\uff0c\u8be5\u5b50\u5c42\u5bf9\u7f16\u7801\u5668\u5806\u6808\u7684\u8f93\u51fa\u6267\u884c\u591a\u5934\u6ce8\u610f\u529b\u3002\u4e0e\u7f16\u7801\u5668\u7c7b\u4f3c\uff0c\u6211\u4eec\u5728\u6bcf\u4e2a\u5b50\u5c42\u5468\u56f4\u91c7\u7528\u6b8b\u5dee\u8fde\u63a5\uff0c\u7136\u540e\u8fdb\u884c\u5c42\u5f52\u4e00\u5316\u3002\u6211\u4eec\u8fd8\u4fee\u6539\u4e86\u89e3\u7801\u5668\u5806\u6808\u4e2d\u7684\u81ea\u6ce8\u610f\u529b\u5b50\u5c42\uff0c\u4ee5\u9632\u6b62\u4f4d\u7f6e\u5173\u6ce8\u540e\u7eed\u4f4d\u7f6e\u3002\u8fd9\u79cd\u63a9\u7801\uff0c\u7ed3\u5408\u8f93\u51fa\u5d4c\u5165\u504f\u79fb\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e8b\u5b9e\uff0c\u786e\u4fdd\u4f4d\u7f6e$i$\u7684\u9884\u6d4b\u4ec5\u4f9d\u8d56\u4e8e\u5c0f\u4e8e$i$\u4f4d\u7f6e\u7684\u5df2\u77e5\u8f93\u51fa\u3002",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "b3e608c0-fb3d-49f2-a553-4e93da694334",
                    "title": "\u6ce8\u610f",
                    "texts": "\u6ce8\u610f\u529b\u51fd\u6570\u53ef\u4ee5\u88ab\u63cf\u8ff0\u4e3a\u5c06\u4e00\u4e2a\u67e5\u8be2\u548c\u4e00\u7ec4\u952e-\u503c\u5bf9\u6620\u5c04\u5230\u4e00\u4e2a\u8f93\u51fa\uff0c\u5176\u4e2d\u67e5\u8be2\u3001\u952e\u3001\u503c\u548c\u8f93\u51fa\u90fd\u662f\u5411\u91cf\u3002\u8f93\u51fa\u88ab\u8ba1\u7b97\u4e3a\u503c\u7684\u52a0\u6743\u548c\uff0c\u5176\u4e2d\u5206\u914d\u7ed9\u6bcf\u4e2a\u503c\u7684\u6743\u91cd\u662f\u901a\u8fc7\u67e5\u8be2\u4e0e\u76f8\u5e94\u952e\u7684\u517c\u5bb9\u6027\u51fd\u6570\u8ba1\u7b97\u7684\u3002",
                    "sections": [
                        {
                            "flag": true,
                            "id": "dfd8bf32-e2b8-45bf-867e-6701c9d1295e",
                            "title": "\u7f29\u653e\u70b9\u79ef\u6ce8\u610f\u529b",
                            "texts": "\u6211\u4eec\u5c06\u6211\u4eec\u7279\u522b\u5173\u6ce8\u7684\u6ce8\u610f\u529b\u79f0\u4e3a\u201c\u7f29\u653e\u70b9\u79ef\u6ce8\u610f\u529b\u201d\uff08\u56fe2\uff09\u3002\u8f93\u5165\u7531\u7ef4\u5ea6\u4e3a$d_k$\u7684\u67e5\u8be2\u548c\u952e\u4ee5\u53ca\u7ef4\u5ea6\u4e3a$d_v$\u7684\u503c\u7ec4\u6210\u3002\u6211\u4eec\u8ba1\u7b97\u67e5\u8be2\u4e0e\u6240\u6709\u952e\u7684\u70b9\u79ef\uff0c\u5c06\u6bcf\u4e2a\u9664\u4ee5$\\\\sqrt{d_k}$\uff0c\u5e76\u5e94\u7528softmax\u51fd\u6570\u4ee5\u83b7\u5f97\u503c\u7684\u6743\u91cd\u3002\n\n\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u540c\u65f6\u5bf9\u4e00\u7ec4\u67e5\u8be2\u8fdb\u884c\u6ce8\u610f\u529b\u51fd\u6570\u8ba1\u7b97\uff0c\u6253\u5305\u5230\u4e00\u4e2a\u77e9\u9635$Q$\u4e2d\u3002\u952e\u548c\u503c\u4e5f\u6253\u5305\u5230\u77e9\u9635$K$\u548c$V$\u4e2d\u3002\u6211\u4eec\u8ba1\u7b97\u8f93\u51fa\u77e9\u9635\u5982\u4e0b\uff1a\n\n$$Attention(Q, K, V) = softmax\\\\left(\\\\frac{QK}{\\\\sqrt{d_k}}\\\\right)V$$\n\n\u6700\u5e38\u7528\u7684\u4e24\u79cd\u6ce8\u610f\u529b\u51fd\u6570\u662f\u52a0\u6027\u6ce8\u610f\u529b\u548c\u70b9\u79ef\uff08\u4e58\u6cd5\uff09\u6ce8\u610f\u529b\u3002\u70b9\u79ef\u6ce8\u610f\u529b\u4e0e\u6211\u4eec\u7684\u7b97\u6cd5\u76f8\u540c\uff0c\u53ea\u662f\u7f29\u653e\u56e0\u5b50\u4e3a$\\\\sqrt{\\\\frac{1}{d_k}}$\u3002\u52a0\u6027\u6ce8\u610f\u529b\u4f7f\u7528\u5177\u6709\u5355\u4e2a\u9690\u85cf\u5c42\u7684\u524d\u9988\u7f51\u7edc\u8ba1\u7b97\u517c\u5bb9\u6027\u51fd\u6570\u3002\u867d\u7136\u5728\u7406\u8bba\u590d\u6742\u6027\u4e0a\u4e24\u8005\u76f8\u4f3c\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\uff0c\u70b9\u79ef\u6ce8\u610f\u529b\u66f4\u5feb\u901f\u3001\u66f4\u8282\u7701\u7a7a\u95f4\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4f7f\u7528\u9ad8\u5ea6\u4f18\u5316\u7684\u77e9\u9635\u4e58\u6cd5\u4ee3\u7801\u5b9e\u73b0\u3002\n\n\u5bf9\u4e8e\u8f83\u5c0f\u7684$d_k$\u503c\uff0c\u8fd9\u4e24\u79cd\u673a\u5236\u8868\u73b0\u7c7b\u4f3c\uff0c\u4f46\u5bf9\u4e8e\u8f83\u5927\u7684$d_k$\u503c\uff0c\u52a0\u6027\u6ce8\u610f\u529b\u4f18\u4e8e\u6ca1\u6709\u7f29\u653e\u7684\u70b9\u79ef\u6ce8\u610f\u529b\u3002\u6211\u4eec\u6000\u7591\u5bf9\u4e8e\u8f83\u5927\u7684$d_k$\u503c\uff0c\u70b9\u79ef\u7684\u7ed3\u679c\u4f1a\u53d8\u5f97\u5f88\u5927\uff0c\u5c06softmax\u51fd\u6570\u63a8\u5165\u5177\u6709\u6781\u5c0f\u68af\u5ea6\u7684\u533a\u57df\u3002\u4e3a\u4e86\u62b5\u6d88\u8fd9\u79cd\u5f71\u54cd\uff0c\u6211\u4eec\u901a\u8fc7$\\\\sqrt{\\\\frac{1}{d_k}}$\u6765\u7f29\u653e\u70b9\u79ef\u3002",
                            "sections": []
                        },
                        {
                            "flag": true,
                            "id": "d253c4b2-38ff-4706-b2b3-62544fe834fe",
                            "title": "\u591a\u5934\u6ce8\u610f\u529b",
                            "texts": "\u4e0e\u4f7f\u7528$d_{\\text{model}}$\u7ef4\u952e\u3001\u503c\u548c\u67e5\u8be2\u6267\u884c\u5355\u4e2a\u6ce8\u610f\u529b\u51fd\u6570\u4e0d\u540c\uff0c\u6211\u4eec\u53d1\u73b0\u901a\u8fc7\u4e0d\u540c\u7684\u5b66\u4e60\u7ebf\u6027\u6295\u5f71\u5c06\u67e5\u8be2\u3001\u952e\u548c\u503c\u7ebf\u6027\u6295\u5f71$h$\u6b21\u5230$d_k$\u3001$d_k$\u548c$d_v$\u7ef4\u5ea6\u4e0a\uff0c\u5bf9\u6a21\u578b\u6709\u76ca\u3002\u7136\u540e\uff0c\u5728\u8fd9\u4e9b\u6295\u5f71\u7248\u672c\u7684\u67e5\u8be2\u3001\u952e\u548c\u503c\u4e0a\u5e76\u884c\u6267\u884c\u6ce8\u610f\u529b\u51fd\u6570\uff0c\u4ea7\u751f$d_v$\u7ef4\u8f93\u51fa\u503c\u3002\u8fd9\u4e9b\u503c\u88ab\u4e32\u8054\uff0c\u7136\u540e\u518d\u6b21\u6295\u5f71\uff0c\u5f97\u5230\u6700\u7ec8\u503c\uff0c\u5982\u56fe2\u6240\u793a\u3002\n\u591a\u5934\u6ce8\u610f\u529b\u4f7f\u6a21\u578b\u80fd\u591f\u540c\u65f6\u5173\u6ce8\u4e0d\u540c\u4f4d\u7f6e\u7684\u4e0d\u540c\u8868\u793a\u5b50\u7a7a\u95f4\u4e2d\u7684\u4fe1\u606f\u3002\u4f7f\u7528\u5355\u4e2a\u6ce8\u610f\u529b\u5934\uff0c\u5e73\u5747\u4f1a\u6291\u5236\u8fd9\u4e00\u70b9\u3002\n$MultiHead(Q, K, V) = \\text{Concat}(head_1, ..., head_h)WO$\uff0c\u5176\u4e2d$head_i = \\text{Attention}(QW_i^Q, KW_i^K, VW_i^V)$\uff0c\u5176\u4e2d\u6295\u5f71\u662f\u53c2\u6570\u77e9\u9635$W_i^Q \\in \\mathbb{R}^{d_{\\text{model}} \\times d_k}$\uff0c$W_i^K \\in \\mathbb{R}^{d_{\\text{model}} \\times d_k}$\uff0c$W_i^V \\in \\mathbb{R}^{d_{\\text{model}} \\times d_v}$\u548c$W_O \\in \\mathbb{R}^{h \\times d_v \\times d_{\\text{model}}}$\u3002\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528$h = 8$\u4e2a\u5e76\u884c\u6ce8\u610f\u529b\u5c42\u6216\u5934\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6ce8\u610f\u529b\u5934\uff0c\u6211\u4eec\u4f7f\u7528$d_k = d_v = d_{\\text{model}}/h = 64$\u3002\u7531\u4e8e\u6bcf\u4e2a\u5934\u7684\u964d\u7ef4\uff0c\u603b\u8ba1\u7b97\u6210\u672c\u4e0e\u5177\u6709\u5b8c\u6574\u7ef4\u5ea6\u7684\u5355\u5934\u6ce8\u610f\u529b\u76f8\u4f3c\u3002",
                            "sections": []
                        },
                        {
                            "flag": true,
                            "id": "150706c0-4671-40c0-9ac7-40d6f6ff6bd9",
                            "title": "\u6211\u4eec\u6a21\u578b\u4e2d\u6ce8\u610f\u529b\u7684\u5e94\u7528",
                            "texts": "Transformer \u5728\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u4e2d\u4f7f\u7528\u591a\u5934\u6ce8\u610f\u529b\uff1a\n\u2022 \u5728\u201c\u7f16\u7801\u5668-\u89e3\u7801\u5668\u6ce8\u610f\u529b\u201d\u5c42\u4e2d\uff0c\u67e5\u8be2\u6765\u81ea\u524d\u4e00\u4e2a\u89e3\u7801\u5668\u5c42\uff0c\u800c\u5185\u5b58\u952e\u548c\u503c\u6765\u81ea\u7f16\u7801\u5668\u7684\u8f93\u51fa\u3002\u8fd9\u4f7f\u5f97\u89e3\u7801\u5668\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u53ef\u4ee5\u5173\u6ce8\u8f93\u5165\u5e8f\u5217\u4e2d\u7684\u6240\u6709\u4f4d\u7f6e\u3002\u8fd9\u6a21\u4eff\u4e86\u5e8f\u5217\u5230\u5e8f\u5217\u6a21\u578b\u4e2d\u7684\u5178\u578b\u7f16\u7801\u5668-\u89e3\u7801\u5668\u6ce8\u610f\u529b\u673a\u5236\uff0c\u5982$[38, 2, 9]$\u3002\n\u2022 \u7f16\u7801\u5668\u5305\u542b\u81ea\u6ce8\u610f\u529b\u5c42\u3002\u5728\u81ea\u6ce8\u610f\u529b\u5c42\u4e2d\uff0c\u6240\u6709\u7684\u952e\u3001\u503c\u548c\u67e5\u8be2\u90fd\u6765\u81ea\u540c\u4e00\u4e2a\u5730\u65b9\uff0c\u5373\u7f16\u7801\u5668\u4e2d\u524d\u4e00\u5c42\u7684\u8f93\u51fa\u3002\u7f16\u7801\u5668\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u53ef\u4ee5\u5173\u6ce8\u7f16\u7801\u5668\u524d\u4e00\u5c42\u7684\u6240\u6709\u4f4d\u7f6e\u3002\n\u2022 \u7c7b\u4f3c\u5730\uff0c\u89e3\u7801\u5668\u4e2d\u7684\u81ea\u6ce8\u610f\u529b\u5c42\u5141\u8bb8\u89e3\u7801\u5668\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u5173\u6ce8\u89e3\u7801\u5668\u4e2d\u76f4\u5230\u8be5\u4f4d\u7f6e\u7684\u6240\u6709\u4f4d\u7f6e\u3002\u6211\u4eec\u9700\u8981\u9632\u6b62\u89e3\u7801\u5668\u4e2d\u7684\u5de6\u5411\u4fe1\u606f\u6d41\u4ee5\u4fdd\u6301\u81ea\u56de\u5f52\u5c5e\u6027\u3002\u6211\u4eec\u901a\u8fc7\u5728\u7f29\u653e\u7684\u70b9\u79ef\u6ce8\u610f\u529b\u4e2d\u5c4f\u853d\uff08\u8bbe\u7f6e\u4e3a$-\u221e$\uff09softmax\u8f93\u5165\u4e2d\u5bf9\u5e94\u4e8e\u975e\u6cd5\u8fde\u63a5\u7684\u6240\u6709\u503c\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u53c2\u89c1\u56fe2\u3002",
                            "sections": []
                        }
                    ]
                },
                {
                    "flag": true,
                    "id": "6ae9eedf-e5fa-4161-8adf-a0830833084d",
                    "title": "\u4f4d\u7f6e\u7f16\u7801\u524d\u9988\u7f51\u7edc",
                    "texts": "\u9664\u4e86\u6ce8\u610f\u529b\u5b50\u5c42\u5916\uff0c\u6211\u4eec\u7684\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u7684\u6bcf\u4e00\u5c42\u90fd\u5305\u542b\u4e00\u4e2a\u5b8c\u5168\u8fde\u63a5\u7684\u524d\u9988\u7f51\u7edc\uff0c\u8be5\u7f51\u7edc\u5206\u522b\u4e14\u76f8\u540c\u5730\u5e94\u7528\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u3002\u8fd9\u5305\u62ec\u4e24\u4e2a\u7ebf\u6027\u53d8\u6362\uff0c\u4e2d\u95f4\u4f7f\u7528ReLU\u6fc0\u6d3b\u3002$$FFN(x) = \\max(0, xW1 + b1)W2 + b2$$ \u5c3d\u7ba1\u7ebf\u6027\u53d8\u6362\u5728\u4e0d\u540c\u4f4d\u7f6e\u4e0a\u662f\u76f8\u540c\u7684\uff0c\u4f46\u5b83\u4eec\u5728\u5c42\u4e0e\u5c42\u4e4b\u95f4\u4f7f\u7528\u4e0d\u540c\u7684\u53c2\u6570\u3002\u53e6\u4e00\u79cd\u63cf\u8ff0\u8fd9\u4e00\u70b9\u7684\u65b9\u5f0f\u662f\u5c06\u5176\u89c6\u4e3a\u5177\u6709\u6838\u5927\u5c0f\u4e3a1\u7684\u4e24\u4e2a\u5377\u79ef\u3002\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7ef4\u5ea6\u4e3a$d_{\\text{model}} = 512$\uff0c\u5185\u90e8\u5c42\u7684\u7ef4\u5ea6\u4e3a$d_{\\text{ff}} = 2048$\u3002",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "01ef2da7-d53f-435a-89ec-5626cfa7adb6",
                    "title": "\u5d4c\u5165\u548cSoftmax",
                    "texts": "\u4e0e\u5176\u4ed6\u5e8f\u5217\u8f6c\u5bfc\u6a21\u578b\u7c7b\u4f3c\uff0c\u6211\u4eec\u4f7f\u7528\u5b66\u4e60\u7684\u5d4c\u5165\u5c06\u8f93\u5165\u6807\u8bb0\u548c\u8f93\u51fa\u6807\u8bb0\u8f6c\u6362\u4e3a\u7ef4\u5ea6\u4e3a $d_{\\text{model}}$ \u7684\u5411\u91cf\u3002\u6211\u4eec\u8fd8\u4f7f\u7528\u901a\u5e38\u7684\u5b66\u4e60\u7ebf\u6027\u53d8\u6362\u548csoftmax\u51fd\u6570\u5c06\u89e3\u7801\u5668\u8f93\u51fa\u8f6c\u6362\u4e3a\u9884\u6d4b\u7684\u4e0b\u4e00\u4e2a\u6807\u8bb0\u6982\u7387\u3002\n\n\u5728\u6211\u4eec\u7684\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u5728\u4e24\u4e2a\u5d4c\u5165\u5c42\u548c\u9884softmax\u7ebf\u6027\u53d8\u6362\u4e4b\u95f4\u5171\u4eab\u76f8\u540c\u7684\u6743\u91cd\u77e9\u9635\uff0c\u7c7b\u4f3c\u4e8e[30]\u3002\u5728\u5d4c\u5165\u5c42\u4e2d\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u6743\u91cd\u4e58\u4ee5 $\\\\sqrt{d_{\\text{model}}}$\u3002",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "499cfaf8-be29-409d-a9d4-0ed0010ccb24",
                    "title": "\u4f4d\u7f6e\u7f16\u7801",
                    "texts": "\u7531\u4e8e\u6211\u4eec\u7684\u6a21\u578b\u4e0d\u5305\u542b\u5faa\u73af\u548c\u5377\u79ef\uff0c\u4e3a\u4e86\u4f7f\u6a21\u578b\u5229\u7528\u5e8f\u5217\u7684\u987a\u5e8f\uff0c\u6211\u4eec\u5fc5\u987b\u6ce8\u5165\u5173\u4e8e\u5e8f\u5217\u4e2d\u6807\u8bb0\u7684\u76f8\u5bf9\u6216\u7edd\u5bf9\u4f4d\u7f6e\u7684\u4e00\u4e9b\u4fe1\u606f\u3002\n\u4e3a\u6b64\uff0c\u6211\u4eec\u5728\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5806\u6808\u7684\u5e95\u90e8\u7684\u8f93\u5165\u5d4c\u5165\u4e2d\u6dfb\u52a0\u201c\u4f4d\u7f6e\u7f16\u7801\u201d\u3002\u4f4d\u7f6e\u7f16\u7801\u4e0e\u5d4c\u5165\u5177\u6709\u76f8\u540c\u7684\u7ef4\u5ea6$d_{\\text{model}}$\uff0c\u4ee5\u4fbf\u4e8c\u8005\u53ef\u4ee5\u76f8\u52a0\u3002\u6709\u8bb8\u591a\u9009\u62e9\u7684\u4f4d\u7f6e\u7f16\u7801\uff0c\u5305\u62ec\u5b66\u4e60\u548c\u56fa\u5b9a\u7684\u3002\n\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e0d\u540c\u9891\u7387\u7684\u6b63\u5f26\u548c\u4f59\u5f26\u51fd\u6570\uff1a\n$PE(pos,2i) = \\sin(pos / 10000^{2i / d_{\\text{model}}})$\n$PE(pos,2i+1) = \\cos(pos / 10000^{2i / d_{\\text{model}}})$\n\u5176\u4e2dpos\u662f\u4f4d\u7f6e\uff0ci\u662f\u7ef4\u5ea6\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f4d\u7f6e\u7f16\u7801\u7684\u6bcf\u4e2a\u7ef4\u5ea6\u5bf9\u5e94\u4e00\u4e2a\u6b63\u5f26\u6ce2\u3002\u6ce2\u957f\u4ece$2\\pi$\u5230$10000 \\cdot 2\\pi$\u5f62\u6210\u51e0\u4f55\u7ea7\u6570\u3002\u6211\u4eec\u9009\u62e9\u8fd9\u4e2a\u51fd\u6570\u662f\u56e0\u4e3a\u6211\u4eec\u5047\u8bbe\u5b83\u5c06\u4f7f\u6a21\u578b\u80fd\u591f\u8f7b\u677e\u5b66\u4e60\u901a\u8fc7\u76f8\u5bf9\u4f4d\u7f6e\u8fdb\u884c\u5173\u6ce8\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4efb\u4f55\u56fa\u5b9a\u7684\u504f\u79fbk\uff0c$PE_{\\text{pos}+k}$\u53ef\u4ee5\u8868\u793a\u4e3a$PE_{\\text{pos}}$\u7684\u7ebf\u6027\u51fd\u6570\u3002\n\u6211\u4eec\u8fd8\u5c1d\u8bd5\u4f7f\u7528\u5b66\u4e60\u7684\u4f4d\u7f6e\u5d4c\u5165\uff0c\u53d1\u73b0\u4e24\u4e2a\u7248\u672c\u4ea7\u751f\u7684\u7ed3\u679c\u51e0\u4e4e\u76f8\u540c\u3002\u6211\u4eec\u9009\u62e9\u4e86\u6b63\u5f26\u7248\u672c\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f7f\u6a21\u578b\u80fd\u591f\u63a8\u5e7f\u5230\u6bd4\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u5e8f\u5217\u957f\u5ea6\u66f4\u957f\u7684\u60c5\u51b5\u3002",
                    "sections": []
                }
            ]
        },
        {
            "flag": true,
            "id": "9a320189-5397-4731-b125-0832b9962cd2",
            "title": "\u4e3a\u4ec0\u4e48\u81ea\u6ce8\u610f\u529b",
            "texts": "\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u81ea\u6ce8\u610f\u529b\u5c42\u7684\u5404\u4e2a\u65b9\u9762\u4e0e\u5e38\u7528\u4e8e\u5c06\u4e00\u4e2a\u53d8\u957f\u7b26\u53f7\u8868\u793a\u5e8f\u5217$(x_1, ..., x_n)$\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u76f8\u7b49\u957f\u5ea6\u5e8f\u5217$(z_1, ..., z_n)$\u7684\u5faa\u73af\u548c\u5377\u79ef\u5c42\u8fdb\u884c\u6bd4\u8f83\uff0c\u5176\u4e2d$x_i, z_i \\in \\mathbb{R}^d$\uff0c\u4f8b\u5982\u5178\u578b\u5e8f\u5217\u8f6c\u5bfc\u7f16\u7801\u5668\u6216\u89e3\u7801\u5668\u4e2d\u7684\u9690\u85cf\u5c42\u3002\u5728\u6fc0\u53d1\u6211\u4eec\u4f7f\u7528\u81ea\u6ce8\u610f\u529b\u7684\u52a8\u673a\u65f6\uff0c\u6211\u4eec\u8003\u8651\u4e86\u4e09\u4e2a\u671f\u671b\u3002\u5176\u4e2d\u4e00\u4e2a\u662f\u6bcf\u5c42\u7684\u603b\u8ba1\u7b97\u590d\u6742\u5ea6\u3002\u53e6\u4e00\u4e2a\u662f\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97\u7684\u91cf\uff0c\u7531\u6240\u9700\u7684\u6700\u5c0f\u987a\u5e8f\u64cd\u4f5c\u6570\u6765\u8861\u91cf\u3002\u7b2c\u4e09\u4e2a\u662f\u7f51\u7edc\u4e2d\u957f\u8ddd\u79bb\u4f9d\u8d56\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u3002\u5b66\u4e60\u957f\u8ddd\u79bb\u4f9d\u8d56\u662f\u8bb8\u591a\u5e8f\u5217\u8f6c\u5bfc\u4efb\u52a1\u4e2d\u7684\u4e00\u4e2a\u5173\u952e\u6311\u6218\u3002\u5f71\u54cd\u5b66\u4e60\u8fd9\u79cd\u4f9d\u8d56\u80fd\u529b\u7684\u4e00\u4e2a\u5173\u952e\u56e0\u7d20\u662f\u524d\u5411\u548c\u540e\u5411\u4fe1\u53f7\u5728\u7f51\u7edc\u4e2d\u5fc5\u987b\u7a7f\u8fc7\u7684\u8def\u5f84\u957f\u5ea6\u3002\u5728\u8f93\u5165\u548c\u8f93\u51fa\u5e8f\u5217\u7684\u4efb\u4f55\u4f4d\u7f6e\u7ec4\u5408\u4e4b\u95f4\u7684\u8def\u5f84\u8d8a\u77ed\uff0c\u5b66\u4e60\u957f\u8ddd\u79bb\u4f9d\u8d56\u5c31\u8d8a\u5bb9\u6613\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8fd8\u6bd4\u8f83\u4e86\u7531\u4e0d\u540c\u5c42\u7c7b\u578b\u7ec4\u6210\u7684\u7f51\u7edc\u4e2d\u4efb\u610f\u4e24\u4e2a\u8f93\u5165\u548c\u8f93\u51fa\u4f4d\u7f6e\u4e4b\u95f4\u7684\u6700\u5927\u8def\u5f84\u957f\u5ea6\u3002\u6b63\u5982\u88681\u4e2d\u6240\u793a\uff0c\u81ea\u6ce8\u610f\u529b\u5c42\u8fde\u63a5\u6240\u6709\u4f4d\u7f6e\u9700\u8981\u6052\u5b9a\u6570\u91cf\u7684\u987a\u5e8f\u6267\u884c\u64cd\u4f5c\uff0c\u800c\u5faa\u73af\u5c42\u5219\u9700\u8981$O(n)$\u4e2a\u987a\u5e8f\u64cd\u4f5c\u3002\u5c31\u8ba1\u7b97\u590d\u6742\u5ea6\u800c\u8a00\uff0c\u5f53\u5e8f\u5217\u65f6\uff0c\u81ea\u6ce8\u610f\u529b\u5c42\u6bd4\u5faa\u73af\u5c42\u66f4\u5feb",
            "sections": []
        },
        {
            "flag": true,
            "id": "651fe7c7-d25e-4ad9-87db-7136b645ff5c",
            "title": "\u8bad\u7ec3",
            "texts": "\u672c\u8282\u63cf\u8ff0\u4e86\u6211\u4eec\u6a21\u578b\u7684\u8bad\u7ec3\u65b9\u6848\u3002",
            "sections": [
                {
                    "flag": true,
                    "id": "2bcc9650-c262-4e90-918a-e45846ba47c2",
                    "title": "\u8bad\u7ec3\u6570\u636e\u548c\u5206\u6279\u5904\u7406",
                    "texts": "\u6211\u4eec\u4f7f\u7528\u4e86\u6807\u51c6\u7684WMT 2014\u82f1\u5fb7\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u5305\u542b\u7ea6450\u4e07\u4e2a\u53e5\u5bf9\u3002\u53e5\u5b50\u4f7f\u7528\u4e86\u5b57\u8282\u5bf9\u7f16\u7801$[3]$\u8fdb\u884c\u7f16\u7801\uff0c\u5171\u4eab\u6e90-\u76ee\u6807\u8bcd\u6c47\u7ea6\u4e3a37000\u4e2a\u6807\u8bb0\u3002\u5bf9\u4e8e\u82f1\u6cd5\u8bed\u8a00\u5bf9\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u89c4\u6a21\u663e\u8457\u66f4\u5927\u7684WMT 2014\u82f1\u6cd5\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u5305\u542b3600\u4e07\u4e2a\u53e5\u5b50\uff0c\u5e76\u5c06\u6807\u8bb0\u5206\u5272\u6210\u4e86\u4e00\u4e2a32000\u4e2a\u8bcd\u7247\u8bcd\u6c47$[38]$\u3002\u53e5\u5bf9\u6309\u7167\u8fd1\u4f3c\u5e8f\u5217\u957f\u5ea6\u8fdb\u884c\u5206\u6279\u5904\u7406\u3002\u6bcf\u4e2a\u8bad\u7ec3\u6279\u6b21\u5305\u542b\u4e00\u7ec4\u53e5\u5bf9\uff0c\u5176\u4e2d\u5927\u7ea6\u5305\u542b25000\u4e2a\u6e90\u6807\u8bb0\u548c25000\u4e2a\u76ee\u6807\u6807\u8bb0\u3002",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "ce1fdeda-e1b8-45ec-a0ae-084e29586e7c",
                    "title": "\u786c\u4ef6\u548c\u65f6\u95f4\u8868",
                    "texts": "\u6211\u4eec\u5728\u4e00\u53f0\u914d\u59078\u4e2aNVIDIA P100 GPU\u7684\u673a\u5668\u4e0a\u8bad\u7ec3\u4e86\u6211\u4eec\u7684\u6a21\u578b\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u57fa\u7840\u6a21\u578b\uff0c\u4f7f\u7528\u8bba\u6587\u4e2d\u63cf\u8ff0\u7684\u8d85\u53c2\u6570\uff0c\u6bcf\u4e2a\u8bad\u7ec3\u6b65\u9aa4\u5927\u7ea6\u9700\u8981$0.4$\u79d2\u3002\u6211\u4eec\u4e3a\u57fa\u7840\u6a21\u578b\u603b\u5171\u8bad\u7ec3\u4e86100,000\u6b65\u621612\u5c0f\u65f6\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u5927\u6a21\u578b\uff08\u5728\u88683\u7684\u5e95\u90e8\u4e00\u884c\u63cf\u8ff0\uff09\uff0c\u6b65\u9aa4\u65f6\u95f4\u4e3a$1.0$\u79d2\u3002\u5927\u6a21\u578b\u8bad\u7ec3\u4e86300,000\u6b65\uff083.5\u5929\uff09\u3002",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "3a8dc153-4a94-40f8-af6c-c7e70c29c246",
                    "title": "\u4f18\u5316\u5668",
                    "texts": "\u6211\u4eec\u4f7f\u7528\u4e86Adam\u4f18\u5316\u5668\uff0c\u5176\u4e2d$\\\\beta_1 = 0.9$\uff0c$\\\\beta_2 = 0.98$\uff0c$\\\\epsilon = 10^{-9}$\u3002\u6211\u4eec\u6839\u636e\u4ee5\u4e0b\u516c\u5f0f\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6539\u53d8\u5b66\u4e60\u7387\uff1a$lrate = d^{-0.5}_{model} \\\\cdot \\\\min(step_{num}^{-0.5}, step_{num} \\\\cdot warmup_{steps}^{-1.5})$\u3002\u8fd9\u610f\u5473\u7740\u5728\u524d$warmup_{steps}$\u4e2a\u8bad\u7ec3\u6b65\u9aa4\u4e2d\u7ebf\u6027\u589e\u52a0\u5b66\u4e60\u7387\uff0c\u4e4b\u540e\u6309\u7167\u6b65\u6570\u7684\u5012\u6570\u5e73\u65b9\u6839\u6210\u6bd4\u4f8b\u51cf\u5c11\u3002\u6211\u4eec\u4f7f\u7528\u4e86$warmup_{steps} = 4000$\u3002",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "5314ec67-89bf-4764-a62c-b686af852b4a",
                    "title": "\u6b63\u5219\u5316",
                    "texts": "\u6211\u4eec\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u91c7\u7528\u4e09\u79cd\u7c7b\u578b\u7684\u6b63\u5219\u5316\uff1a\n\u6b8b\u5dee\u4e22\u5f03\uff1a\u6211\u4eec\u5bf9\u6bcf\u4e2a\u5b50\u5c42\u7684\u8f93\u51fa\u5e94\u7528\u4e22\u5f03\uff0c\u7136\u540e\u5c06\u5176\u6dfb\u52a0\u5230\u5b50\u5c42\u8f93\u5165\u5e76\u8fdb\u884c\u5f52\u4e00\u5316\u3002\u6b64\u5916\uff0c\u6211\u4eec\u5728\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5806\u6808\u4e2d\u7684\u5d4c\u5165\u548c\u4f4d\u7f6e\u7f16\u7801\u7684\u603b\u548c\u4e0a\u4e5f\u5e94\u7528\u4e86\u4e22\u5f03\u3002\u5bf9\u4e8e\u57fa\u7840\u6a21\u578b\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u901f\u7387$P_{\\text{drop}} = 0.1$\u3002\n\u6807\u7b7e\u5e73\u6ed1\uff1a\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u91c7\u7528\u4e86\u4ef7\u503c\u4e3a$\\\\epsilon_{\\text{ls}} = 0.1$\u7684\u6807\u7b7e\u5e73\u6ed1\u3002\u8fd9\u4f1a\u589e\u52a0\u56f0\u60d1\u5ea6\uff0c\u56e0\u4e3a\u6a21\u578b\u5b66\u4f1a\u66f4\u52a0\u4e0d\u786e\u5b9a\uff0c\u4f46\u4f1a\u63d0\u9ad8\u51c6\u786e\u6027\u548cBLEU\u5206\u6570\u3002",
                    "sections": []
                }
            ]
        },
        {
            "flag": true,
            "id": "54f21048-6d63-4411-b3ea-7cc3b8d0fc40",
            "title": "\u7ed3\u679c",
            "texts": "\u5728\u795e\u7ecf\u673a\u5668\u7ffb\u8bd1\uff08NMT\uff09\u9886\u57df\uff0cConvS2S\u662f\u4e00\u79cd\u5377\u79ef\u5e8f\u5217\u5230\u5e8f\u5217\u6a21\u578b\uff0c\u663e\u793a\u51fa\u4e86\u5f88\u597d\u7684\u7ed3\u679c\u3002ConvS2S\u5229\u7528\u5377\u79ef\u5c42\u4f5c\u4e3a\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\uff0c\u4f7f\u5176\u80fd\u591f\u9ad8\u6548\u5730\u6355\u83b7\u5c40\u90e8\u4f9d\u8d56\u5173\u7cfb\u3002\u8fd9\u79cd\u67b6\u6784\u5728\u957f\u8ddd\u79bb\u4f9d\u8d56\u5173\u7cfb\u4e0d\u90a3\u4e48\u5173\u952e\u7684\u4efb\u52a1\u4e2d\u7279\u522b\u6709\u6548\u3002\u901a\u8fc7\u4f7f\u7528\u5377\u79ef\u5c42\uff0cConvS2S\u53ef\u4ee5\u964d\u4f4e\u6a21\u578b\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\uff0c\u76f8\u5bf9\u4e8e\u4f20\u7edf\u7684\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\uff08RNN\uff09\u67b6\u6784\u3002",
            "sections": [
                {
                    "flag": true,
                    "id": "376910db-02e6-4c63-94b7-4d99e5a536fa",
                    "title": "\u673a\u5668\u7ffb\u8bd1",
                    "texts": "\u5728WMT 2014\u5e74\u7684\u82f1\u5fb7\u7ffb\u8bd1\u4efb\u52a1\u4e2d\uff0c\u5927\u578bTransformer\u6a21\u578b\uff08\u88682\u4e2d\u7684Transformer\uff08big\uff09\uff09\u7684\u8868\u73b0\u4f18\u4e8e\u5148\u524d\u62a5\u544a\u7684\u6700\u4f73\u6a21\u578b\uff08\u5305\u62ec\u96c6\u6210\u6a21\u578b\uff09\u8d85\u8fc7$2.0$ BLEU\uff0c\u5efa\u7acb\u4e86\u65b0\u7684BLEU\u5f97\u5206\u8bb0\u5f55\uff0c\u8fbe\u5230$28.4$\u3002\u8be5\u6a21\u578b\u7684\u914d\u7f6e\u5217\u5728\u88683\u7684\u5e95\u90e8\u3002\u8bad\u7ec3\u57288\u4e2aP100 GPU\u4e0a\u82b1\u8d39\u4e86$3.5$\u5929\u3002\u5373\u4f7f\u6211\u4eec\u7684\u57fa\u7840\u6a21\u578b\u4e5f\u8d85\u8fc7\u4e86\u5148\u524d\u53d1\u5e03\u7684\u6240\u6709\u6a21\u578b\u548c\u96c6\u6210\u6a21\u578b\uff0c\u5728\u4efb\u4f55\u7ade\u4e89\u6a21\u578b\u7684\u8bad\u7ec3\u6210\u672c\u7684\u4e00\u5c0f\u90e8\u5206\u3002\n\n\u5728WMT 2014\u5e74\u7684\u82f1\u6cd5\u7ffb\u8bd1\u4efb\u52a1\u4e2d\uff0c\u6211\u4eec\u7684\u5927\u578b\u6a21\u578b\u5b9e\u73b0\u4e86$41.0$\u7684BLEU\u5f97\u5206\uff0c\u4f18\u4e8e\u5148\u524d\u53d1\u5e03\u7684\u6240\u6709\u5355\u4e00\u6a21\u578b\uff0c\u8bad\u7ec3\u6210\u672c\u4e0d\u5230\u5148\u524d\u6700\u5148\u8fdb\u6a21\u578b\u7684$1/4$\u3002\u7528\u4e8e\u82f1\u6cd5\u7ffb\u8bd1\u7684Transformer\uff08big\uff09\u6a21\u578b\u4f7f\u7528\u4e86$P_{\\text{drop}} = 0.1$\u7684\u8f8d\u5b66\u7387\uff0c\u800c\u4e0d\u662f$0.3$\u3002\n\n\u5bf9\u4e8e\u57fa\u7840\u6a21\u578b\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u901a\u8fc7\u5bf9\u6700\u540e$5$\u4e2a\u68c0\u67e5\u70b9\u8fdb\u884c\u5e73\u5747\u83b7\u5f97\u7684\u5355\u4e00\u6a21\u578b\uff0c\u8fd9\u4e9b\u68c0\u67e5\u70b9\u662f\u4ee5$10$\u5206\u949f\u95f4\u9694\u7f16\u5199\u7684\u3002\u5bf9\u4e8e\u5927\u578b\u6a21\u578b\uff0c\u6211\u4eec\u5bf9\u6700\u540e$20$\u4e2a\u68c0\u67e5\u70b9\u8fdb\u884c\u4e86\u5e73\u5747\u3002\u6211\u4eec\u4f7f\u7528\u4e86\u675f\u641c\u7d22\uff0c\u675f\u5927\u5c0f\u4e3a$4$\uff0c\u957f\u5ea6\u60e9\u7f5a$\\\\alpha = 0.6$ $[38]$\u3002\u8fd9\u4e9b\u8d85\u53c2\u6570\u662f\u5728\u5f00\u53d1\u96c6\u4e0a\u8fdb\u884c\u5b9e\u9a8c\u540e\u9009\u62e9\u7684\u3002\u6211\u4eec\u5c06\u63a8\u65ad\u671f\u95f4\u7684\u6700\u5927\u8f93\u51fa\u957f\u5ea6\u8bbe\u7f6e\u4e3a\u8f93\u5165\u957f\u5ea6$+ 50$\uff0c\u4f46\u5c3d\u53ef\u80fd\u65e9\u5730\u7ec8\u6b62$[38]$\u3002\n\n\u88682\u603b\u7ed3\u4e86\u6211\u4eec\u7684\u7ed3\u679c\uff0c\u5e76\u5c06\u6211\u4eec\u7684\u7ffb\u8bd1\u8d28\u91cf\u548c\u8bad\u7ec3\u6210\u672c\u4e0e\u6587\u732e\u4e2d\u7684\u5176\u4ed6\u6a21\u578b\u67b6\u6784\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u6211\u4eec\u901a\u8fc7\u5c06\u8bad\u7ec3\u65f6\u95f4\u3001\u4f7f\u7528\u7684GPU\u6570\u91cf\u548c\u6bcf\u4e2aGPU\u7684\u6301\u7eed\u5355\u7cbe\u5ea6\u6d6e\u70b9\u5bb9\u91cf\u7684\u4f30\u8ba1\u76f8\u4e58\u6765\u4f30\u8ba1\u8bad\u7ec3\u6a21\u578b\u6240\u4f7f\u7528\u7684\u6d6e\u70b9\u8fd0\u7b97\u6b21\u6570$5$\u3002",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "7a9b47e2-4e03-47fc-8aec-492940ae91ab",
                    "title": "\u6a21\u578b\u53d8\u79cd",
                    "texts": "\u4e3a\u4e86\u8bc4\u4f30Transformer\u4e0d\u540c\u7ec4\u4ef6\u7684\u91cd\u8981\u6027\uff0c\u6211\u4eec\u4ee5\u4e0d\u540c\u65b9\u5f0f\u6539\u53d8\u4e86\u6211\u4eec\u7684\u57fa\u7840\u6a21\u578b\uff0c\u5728\u82f1\u8bed\u5230\u5fb7\u8bed\u7ffb\u8bd1\u7684\u5f00\u53d1\u96c6newstest2013\u4e0a\u6d4b\u91cf\u6027\u80fd\u53d8\u5316\u3002\u6211\u4eec\u4f7f\u7528\u4e86\u524d\u4e00\u8282\u4e2d\u63cf\u8ff0\u7684beam search\uff0c\u4f46\u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\u70b9\u5e73\u5747\u5316\u3002\u6211\u4eec\u5728\u88683\u4e2d\u5448\u73b0\u4e86\u8fd9\u4e9b\u7ed3\u679c\u3002\n\n\u5728\u88683\u7684(A)\u884c\u4e2d\uff0c\u6211\u4eec\u6539\u53d8\u4e86\u6ce8\u610f\u529b\u5934\u7684\u6570\u91cf\u4ee5\u53ca\u6ce8\u610f\u529b\u952e\u548c\u503c\u7684\u7ef4\u5ea6\uff0c\u4fdd\u6301\u8ba1\u7b97\u91cf\u6052\u5b9a\uff0c\u5982\u7b2c3.2.2\u8282\u6240\u8ff0\u3002\u867d\u7136\u5355\u5934\u6ce8\u610f\u529b\u6bd4\u6700\u4f73\u8bbe\u7f6e\u5dee$0.9$ BLEU\uff0c\u4f46\u8d28\u91cf\u4e5f\u968f\u7740\u5934\u90e8\u8fc7\u591a\u800c\u4e0b\u964d\u3002\n\n\u5728\u88683\u7684(B)\u884c\u4e2d\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u51cf\u5c0f\u6ce8\u610f\u529b\u952e\u5927\u5c0f$d_k$\u4f1a\u635f\u5bb3\u6a21\u578b\u8d28\u91cf\u3002\u8fd9\u8868\u660e\u786e\u5b9a\u517c\u5bb9\u6027\u5e76\u4e0d\u5bb9\u6613\uff0c\u6bd4\u70b9\u79ef\u66f4\u590d\u6742\u7684\u517c\u5bb9\u6027\u51fd\u6570\u53ef\u80fd\u662f\u6709\u76ca\u7684\u3002\u6211\u4eec\u8fdb\u4e00\u6b65\u89c2\u5bdf\u5230\u5728(C)\u548c(D)\u884c\u4e2d\uff0c\u6b63\u5982\u9884\u671f\u7684\u90a3\u6837\uff0c\u66f4\u5927\u7684\u6a21\u578b\u66f4\u597d\uff0c\u5e76\u4e14\u8f8d\u5b66\u5bf9\u4e8e\u907f\u514d\u8fc7\u62df\u5408\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u5728(E)\u884c\u4e2d\uff0c\u6211\u4eec\u7528\u5b66\u4e60\u7684\u4f4d\u7f6e\u5d4c\u5165\u66ff\u6362\u4e86\u6211\u4eec\u7684\u6b63\u5f26\u4f4d\u7f6e\u7f16\u7801\uff0c\u5e76\u89c2\u5bdf\u5230\u4e0e\u57fa\u7840\u6a21\u578b\u51e0\u4e4e\u76f8\u540c\u7684\u7ed3\u679c\u3002",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "2e6f7c77-ac38-4204-a7fe-9d0e97c3f841",
                    "title": "\u82f1\u8bed\u6210\u5206\u53e5\u6cd5\u5206\u6790",
                    "texts": "\u4e3a\u4e86\u8bc4\u4f30Transformer\u662f\u5426\u53ef\u4ee5\u63a8\u5e7f\u5230\u5176\u4ed6\u4efb\u52a1\uff0c\u6211\u4eec\u5bf9\u82f1\u8bed\u6210\u5206\u89e3\u6790\u8fdb\u884c\u4e86\u5b9e\u9a8c\u3002\u8fd9\u9879\u4efb\u52a1\u5177\u6709\u7279\u5b9a\u6311\u6218\uff1a\u8f93\u51fa\u53d7\u5230\u5f3a\u70c8\u7684\u7ed3\u6784\u7ea6\u675f\uff0c\u5e76\u4e14\u6bd4\u8f93\u5165\u8981\u957f\u5f97\u591a\u3002\u6b64\u5916\uff0cRNN\u5e8f\u5217\u5230\u5e8f\u5217\u6a21\u578b\u5728\u5c0f\u6570\u636e\u60c5\u51b5\u4e0b\u65e0\u6cd5\u8fbe\u5230\u6700\u5148\u8fdb\u7684\u7ed3\u679c\u3002\u6211\u4eec\u5728\u534e\u5c14\u8857\u65e5\u62a5\uff08WSJ\uff09Penn Treebank\u7684\u90e8\u5206\u4e0a\u8bad\u7ec3\u4e86\u4e00\u4e2a4\u5c42Transformer\uff0c\u5927\u7ea6\u670940K\u4e2a\u8bad\u7ec3\u53e5\u5b50\u3002\u6211\u4eec\u8fd8\u5728\u534a\u76d1\u7763\u8bbe\u7f6e\u4e2d\u8bad\u7ec3\u4e86\u5b83\uff0c\u4f7f\u7528\u4e86\u5927\u7ea61700\u4e07\u4e2a\u53e5\u5b50\u7684\u66f4\u5927\u7684\u9ad8\u7f6e\u4fe1\u5ea6\u548cBerkleyParser\u8bed\u6599\u5e93\u3002\u6211\u4eec\u5728WSJ\u72ec\u7acb\u8bbe\u7f6e\u4e2d\u4f7f\u7528\u4e8616K\u4e2a\u6807\u8bb0\u7684\u8bcd\u6c47\u8868\uff0c\u5728\u534a\u76d1\u7763\u8bbe\u7f6e\u4e2d\u4f7f\u7528\u4e8632K\u4e2a\u6807\u8bb0\u7684\u8bcd\u6c47\u8868\u3002\n\n\u6211\u4eec\u53ea\u8fdb\u884c\u4e86\u5c11\u91cf\u5b9e\u9a8c\u6765\u9009\u62e9\u5728\u7b2c22\u8282\u5f00\u53d1\u96c6\u4e0a\u7684dropout\u3001\u6ce8\u610f\u529b\u548c\u6b8b\u5dee\uff08\u7b2c5.4\u8282\uff09\u3001\u5b66\u4e60\u7387\u548c\u6ce2\u675f\u5927\u5c0f\uff0c\u6240\u6709\u5176\u4ed6\u53c2\u6570\u5747\u4fdd\u6301\u4e0d\u53d8\uff0c\u4e0e\u82f1\u5fb7\u57fa\u7840\u7ffb\u8bd1\u6a21\u578b\u76f8\u540c\u3002\u5728\u63a8\u65ad\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u6700\u5927\u8f93\u51fa\u957f\u5ea6\u589e\u52a0\u5230\u8f93\u5165\u957f\u5ea6+300\u3002\u6211\u4eec\u5728WSJ\u72ec\u7acb\u8bbe\u7f6e\u548c\u534a\u76d1\u7763\u8bbe\u7f6e\u4e2d\u90fd\u4f7f\u7528\u4e86\u6ce2\u675f\u5927\u5c0f\u4e3a21\u548c$\\\\alpha = 0.3$\u3002\n\n\u6211\u4eec\u5728\u88684\u4e2d\u7684\u7ed3\u679c\u663e\u793a\uff0c\u5c3d\u7ba1\u7f3a\u4e4f\u4efb\u52a1\u7279\u5b9a\u7684\u8c03\u6574\uff0c\u6211\u4eec\u7684\u6a21\u578b\u8868\u73b0\u51fa\u4e4e\u610f\u6599\u5730\u597d\uff0c\u4ea7\u751f\u7684\u7ed3\u679c\u6bd4\u6240\u6709\u5148\u524d\u62a5\u544a\u7684\u6a21\u578b\u90fd\u8981\u597d\uff0c\u9664\u4e86\u9012\u5f52\u795e\u7ecf\u7f51\u7edc\u8bed\u6cd5\u3002\n\n\u4e0eRNN\u5e8f\u5217\u5230\u5e8f\u5217\u6a21\u578b\u76f8\u6bd4\uff0cTransformer\u5373\u4f7f\u4ec5\u572840K\u4e2a\u53e5\u5b50\u7684WSJ\u8bad\u7ec3\u96c6\u4e0a\u8bad\u7ec3\uff0c\u4e5f\u80fd\u80dc\u8fc7BerkleyParser\u3002",
                    "sections": []
                }
            ]
        },
        {
            "flag": true,
            "id": "7feb6a67-87ba-4c5a-90bb-b944ba12823c",
            "title": "\u7ed3\u8bba",
            "texts": "\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u63d0\u51fa\u4e86Transformer\uff0c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u5b8c\u5168\u57fa\u4e8e\u6ce8\u610f\u529b\u7684\u5e8f\u5217\u8f6c\u5bfc\u6a21\u578b\uff0c\u7528\u591a\u5934\u81ea\u6ce8\u610f\u529b\u66ff\u6362\u4e86\u5728\u7f16\u7801\u5668-\u89e3\u7801\u5668\u67b6\u6784\u4e2d\u6700\u5e38\u7528\u7684\u5faa\u73af\u5c42\u3002\n\u5bf9\u4e8e\u7ffb\u8bd1\u4efb\u52a1\uff0cTransformer\u7684\u8bad\u7ec3\u901f\u5ea6\u6bd4\u57fa\u4e8e\u5faa\u73af\u6216\u5377\u79ef\u5c42\u7684\u67b6\u6784\u5feb\u5f97\u591a\u3002\u5728WMT 2014\u82f1\u5fb7\u7ffb\u8bd1\u4efb\u52a1\u548cWMT 2014\u82f1\u6cd5\u7ffb\u8bd1\u4efb\u52a1\u4e2d\uff0c\u6211\u4eec\u53d6\u5f97\u4e86\u65b0\u7684\u6700\u5148\u8fdb\u6210\u679c\u3002\u5728\u524d\u4e00\u9879\u4efb\u52a1\u4e2d\uff0c\u6211\u4eec\u7684\u6700\u4f73\u6a21\u578b\u751a\u81f3\u4f18\u4e8e\u4ee5\u5f80\u6240\u6709\u62a5\u544a\u7684\u96c6\u6210\u6a21\u578b\u3002\n\u6211\u4eec\u5bf9\u57fa\u4e8e\u6ce8\u610f\u529b\u7684\u6a21\u578b\u7684\u672a\u6765\u611f\u5230\u5174\u594b\uff0c\u5e76\u8ba1\u5212\u5c06\u5b83\u4eec\u5e94\u7528\u4e8e\u5176\u4ed6\u4efb\u52a1\u3002\u6211\u4eec\u8ba1\u5212\u5c06Transformer\u6269\u5c55\u5230\u6d89\u53ca\u6587\u672c\u4ee5\u5916\u7684\u8f93\u5165\u548c\u8f93\u51fa\u6a21\u6001\u7684\u95ee\u9898\uff0c\u5e76\u7814\u7a76\u5c40\u90e8\u3001\u53d7\u9650\u7684\u6ce8\u610f\u529b\u673a\u5236\uff0c\u4ee5\u6709\u6548\u5904\u7406\u8bf8\u5982\u56fe\u50cf\u3001\u97f3\u9891\u548c\u89c6\u9891\u7b49\u5927\u8f93\u5165\u548c\u8f93\u51fa\u3002\u4f7f\u751f\u6210\u8fc7\u7a0b\u4e0d\u90a3\u4e48\u987a\u5e8f\u5316\u662f\u6211\u4eec\u7684\u53e6\u4e00\u4e2a\u7814\u7a76\u76ee\u6807\u3002\n\u6211\u4eec\u7528\u4e8e\u8bad\u7ec3\u548c\u8bc4\u4f30\u6a21\u578b\u7684\u4ee3\u7801\u53ef\u5728https://github.com/tensorflow/tensor2tensor\u627e\u5230\u3002\n\u81f4\u8c22 \u6211\u4eec\u611f\u8c22Nal Kalchbrenner\u548cStephan Gouws\u5bf9\u4ed6\u4eec\u5bcc\u6709\u6210\u679c\u7684\u8bc4\u8bba\u3001\u7ea0\u6b63\u548c\u542f\u53d1\u3002",
            "sections": []
        }
    ],
    "01ef2da7-d53f-435a-89ec-5626cfa7adb6_add_sibling": false,
    "ffc44383-eddf-4231-9d4b-a295a90b53f2_title_change": "References",
    "651fe7c7-d25e-4ad9-87db-7136b645ff5c_title": "Training",
    "6ae9eedf-e5fa-4161-8adf-a0830833084d_add_child": false,
    "summary": "\u672c\u6587\u4ecb\u7ecd\u4e86\u4e00\u79cd\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\u7684\u65b0\u578b\u7f51\u7edc\u67b6\u6784Transformer\uff0c\u5b8c\u5168\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\uff0c\u6452\u5f03\u4e86\u5faa\u73af\u548c\u5377\u79ef\u3002\u901a\u8fc7\u5728\u4e24\u4e2a\u673a\u5668\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u7684\u5b9e\u9a8c\uff0c\u8868\u660e\u8fd9\u4e9b\u6a21\u578b\u5728\u8d28\u91cf\u4e0a\u4f18\u8d8a\uff0c\u66f4\u6613\u5e76\u884c\u5316\uff0c\u8bad\u7ec3\u65f6\u95f4\u663e\u8457\u51cf\u5c11\u3002Transformer\u5728WMT 2014\u82f1\u5fb7\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u8fbe\u523028.4 BLEU\uff0c\u8d85\u8fc7\u73b0\u6709\u6700\u4f73\u7ed3\u679c\uff0c\u5305\u62ec\u96c6\u6210\u6a21\u578b\uff0c\u63d0\u5347\u8d85\u8fc72 BLEU\u3002\u5728WMT 2014\u82f1\u6cd5\u7ffb\u8bd1\u4efb\u52a1\u4e0a\uff0c\u6a21\u578b\u57288\u4e2aGPU\u4e0a\u8bad\u7ec33.5\u5929\u540e\uff0c\u5b9e\u73b0\u4e8641.8\u7684BLEU\u5f97\u5206\uff0c\u662f\u6587\u732e\u4e2d\u6700\u4f73\u6a21\u578b\u8bad\u7ec3\u6210\u672c\u7684\u4e00\u5c0f\u90e8\u5206\u3002\u8be5\u6a21\u578b\u5728\u5176\u4ed6\u4efb\u52a1\u4e0a\u4e5f\u8868\u73b0\u826f\u597d\u3002",
    "dfd8bf32-e2b8-45bf-867e-6701c9d1295e_texts": "We call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). The input consists of\nqueries and keys of dimension dk, and values of dimension dv. We compute the dot products of the\nquery with all keys, divide each by \u221adk, and apply a softmax function to obtain the weights on the\nvalues.\nIn practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices K and V . We compute\nthe matrix of outputs as:\nAttention(Q, K, V ) = softmax(QK \u221adkT )V (1)\nThe two most commonly used attention functions are additive attention [2], and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor\nof \u221a1dk . Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-efficient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\nWhile for small values of dk the two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk [3]. We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients 4. To counteract this effect, we scale the dot products by \u221a1dk .",
    "7feb6a67-87ba-4c5a-90bb-b944ba12823c_add_child": false,
    "7a9b47e2-4e03-47fc-8aec-492940ae91ab_add_child": false,
    "651fe7c7-d25e-4ad9-87db-7136b645ff5c_delete": false,
    "54f21048-6d63-4411-b3ea-7cc3b8d0fc40_add_child": false,
    "7a9b47e2-4e03-47fc-8aec-492940ae91ab_title_change": "Model Variations",
    "2bcc9650-c262-4e90-918a-e45846ba47c2_title": "Training Data and Batching",
    "376910db-02e6-4c63-94b7-4d99e5a536fa_delete": false,
    "authors": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, \u0141ukasz Kaiser",
    "6ae9eedf-e5fa-4161-8adf-a0830833084d_texts_change": "In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a ReLU activation in between.\nFFN(x) = max(0, xW1 + b1)W2 + b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality\ndff = 2048.",
    "keywords": "",
    "fc8a6d85-403f-4551-99f8-81b756e9bd5d_title": "Encoder and Decoder Stacks",
    "b3e608c0-fb3d-49f2-a553-4e93da694334_title_change": "Attention",
    "summary_result": {
        "summary": "\u672c\u6587\u4ecb\u7ecd\u4e86\u4e00\u79cd\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\u7684\u65b0\u578b\u7f51\u7edc\u67b6\u6784Transformer\uff0c\u5b8c\u5168\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\uff0c\u6452\u5f03\u4e86\u5faa\u73af\u548c\u5377\u79ef\u3002\u901a\u8fc7\u5728\u4e24\u4e2a\u673a\u5668\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u7684\u5b9e\u9a8c\uff0c\u8868\u660e\u8fd9\u4e9b\u6a21\u578b\u5728\u8d28\u91cf\u4e0a\u4f18\u8d8a\uff0c\u66f4\u6613\u5e76\u884c\u5316\uff0c\u8bad\u7ec3\u65f6\u95f4\u663e\u8457\u51cf\u5c11\u3002Transformer\u5728WMT 2014\u82f1\u5fb7\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u8fbe\u523028.4 BLEU\uff0c\u8d85\u8fc7\u73b0\u6709\u6700\u4f73\u7ed3\u679c\uff0c\u5305\u62ec\u96c6\u6210\u6a21\u578b\uff0c\u63d0\u5347\u8d85\u8fc72 BLEU\u3002\u5728WMT 2014\u82f1\u6cd5\u7ffb\u8bd1\u4efb\u52a1\u4e0a\uff0c\u6a21\u578b\u57288\u4e2aGPU\u4e0a\u8bad\u7ec33.5\u5929\u540e\uff0c\u5b9e\u73b0\u4e8641.8\u7684BLEU\u5f97\u5206\uff0c\u662f\u6587\u732e\u4e2d\u6700\u4f73\u6a21\u578b\u8bad\u7ec3\u6210\u672c\u7684\u4e00\u5c0f\u90e8\u5206\u3002\u8be5\u6a21\u578b\u5728\u5176\u4ed6\u4efb\u52a1\u4e0a\u4e5f\u8868\u73b0\u826f\u597d\u3002",
        "section_summaries": [
            {
                "section_number": "1",
                "content_summary": "\u6458\u8981\u4ecb\u7ecd\u4e86Transformer\u6a21\u578b\uff0c\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\uff0c\u6452\u5f03\u4e86\u5faa\u73af\u548c\u5377\u79ef\uff0c\u5728\u673a\u5668\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u8868\u73b0\u4f18\u8d8a\u3002",
                "sections": []
            },
            {
                "section_number": "2",
                "content_summary": "\u4ecb\u7ecd\u4e86\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u548c\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u5728\u5e8f\u5217\u5efa\u6a21\u548c\u8f6c\u6362\u95ee\u9898\u4e2d\u7684\u5e94\u7528\uff0c\u63d0\u51fa\u4e86Transformer\u6a21\u578b\uff0c\u5b8c\u5168\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\uff0c\u5b9e\u73b0\u66f4\u9ad8\u7684\u5e76\u884c\u5316\u548c\u7ffb\u8bd1\u8d28\u91cf\u3002",
                "sections": []
            },
            {
                "section_number": "3",
                "content_summary": "\u8ba8\u8bba\u4e86\u51cf\u5c11\u987a\u5e8f\u8ba1\u7b97\u7684\u76ee\u6807\uff0c\u4ecb\u7ecd\u4e86Extended Neural GPU\u3001ByteNet\u548cConvS2S\u7b49\u6a21\u578b\uff0c\u6307\u51faTransformer\u901a\u8fc7\u81ea\u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0\u8f93\u5165\u548c\u8f93\u51fa\u7684\u8868\u793a\u8ba1\u7b97\uff0c\u907f\u514d\u4e86\u5e8f\u5217\u5bf9\u9f50\u7684RNN\u6216\u5377\u79ef\u3002",
                "sections": []
            },
            {
                "section_number": "4",
                "content_summary": "\u63cf\u8ff0\u4e86Transformer\u7684\u6a21\u578b\u67b6\u6784\uff0c\u5305\u62ec\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5806\u53e0\u3001\u6ce8\u610f\u529b\u673a\u5236\u3001\u4f4d\u7f6e\u9010\u5c42\u524d\u9988\u7f51\u7edc\u3001\u5d4c\u5165\u548cSoftmax\u3001\u4f4d\u7f6e\u7f16\u7801\u7b49\u3002",
                "sections": [
                    {
                        "section_number": "4.1",
                        "content_summary": "\u4ecb\u7ecd\u4e86\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u5806\u53e0\u7684\u7ed3\u6784\uff0c\u5305\u62ec\u81ea\u6ce8\u610f\u529b\u673a\u5236\u548c\u524d\u9988\u7f51\u7edc\u3002",
                        "sections": []
                    },
                    {
                        "section_number": "4.2",
                        "content_summary": "\u8be6\u7ec6\u8ba8\u8bba\u4e86\u6ce8\u610f\u529b\u673a\u5236\uff0c\u5305\u62ec\u7f29\u653e\u70b9\u79ef\u6ce8\u610f\u529b\u548c\u591a\u5934\u6ce8\u610f\u529b\u7684\u5e94\u7528\u3002",
                        "sections": [
                            {
                                "section_number": "4.2.1",
                                "content_summary": "\u4ecb\u7ecd\u4e86\u7f29\u653e\u70b9\u79ef\u6ce8\u610f\u529b\u7684\u8ba1\u7b97\u65b9\u5f0f\u548c\u6027\u80fd\u6bd4\u8f83\u3002",
                                "sections": []
                            },
                            {
                                "section_number": "4.2.2",
                                "content_summary": "\u8ba8\u8bba\u4e86\u591a\u5934\u6ce8\u610f\u529b\u7684\u4f18\u52bf\u548c\u5e94\u7528\u3002",
                                "sections": []
                            },
                            {
                                "section_number": "4.2.3",
                                "content_summary": "\u8bf4\u660e\u4e86Transformer\u4e2d\u591a\u5934\u6ce8\u610f\u529b\u7684\u4e09\u79cd\u5e94\u7528\u65b9\u5f0f\u3002",
                                "sections": []
                            }
                        ]
                    },
                    {
                        "section_number": "4.3",
                        "content_summary": "\u63cf\u8ff0\u4e86\u4f4d\u7f6e\u9010\u5c42\u524d\u9988\u7f51\u7edc\u7684\u7ed3\u6784\u548c\u4f5c\u7528\u3002",
                        "sections": []
                    },
                    {
                        "section_number": "4.4",
                        "content_summary": "\u4ecb\u7ecd\u4e86\u5d4c\u5165\u548cSoftmax\u7684\u4f7f\u7528\uff0c\u5305\u62ec\u6743\u91cd\u5171\u4eab\u548c\u5d4c\u5165\u5c42\u7684\u5904\u7406\u3002",
                        "sections": []
                    },
                    {
                        "section_number": "4.5",
                        "content_summary": "\u8ba8\u8bba\u4e86\u4f4d\u7f6e\u7f16\u7801\u7684\u91cd\u8981\u6027\u548c\u91c7\u7528\u7684\u65b9\u6cd5\uff0c\u5305\u62ec\u6b63\u5f26\u548c\u4f59\u5f26\u51fd\u6570\u7684\u5e94\u7528\u3002",
                        "sections": []
                    }
                ]
            },
            {
                "section_number": "5",
                "content_summary": "\u6bd4\u8f83\u4e86\u81ea\u6ce8\u610f\u529b\u5c42\u4e0e\u5e38\u7528\u7684\u5faa\u73af\u548c\u5377\u79ef\u5c42\u5728\u5e8f\u5217\u8f6c\u6362\u4e2d\u7684\u5404\u4e2a\u65b9\u9762\uff0c\u6307\u51fa\u81ea\u6ce8\u610f\u529b\u5c42\u5728\u8ba1\u7b97\u590d\u6742\u5ea6\u3001\u5e76\u884c\u8ba1\u7b97\u548c\u957f\u8ddd\u79bb\u4f9d\u8d56\u8def\u5f84\u957f\u5ea6\u7b49\u65b9\u9762\u7684\u4f18\u52bf\u3002",
                "sections": []
            },
            {
                "section_number": "6",
                "content_summary": "\u63cf\u8ff0\u4e86\u6a21\u578b\u7684\u8bad\u7ec3\u8fc7\u7a0b\uff0c\u5305\u62ec\u8bad\u7ec3\u6570\u636e\u548c\u6279\u5904\u7406\u3001\u786c\u4ef6\u548c\u8bad\u7ec3\u8ba1\u5212\u3001\u4f18\u5316\u5668\u548c\u6b63\u5219\u5316\u7b49\u3002",
                "sections": [
                    {
                        "section_number": "6.1",
                        "content_summary": "\u4ecb\u7ecd\u4e86\u8bad\u7ec3\u6570\u636e\u548c\u6279\u5904\u7406\u7684\u7ec6\u8282\u3002",
                        "sections": []
                    },
                    {
                        "section_number": "6.2",
                        "content_summary": "\u63cf\u8ff0\u4e86\u786c\u4ef6\u914d\u7f6e\u548c\u8bad\u7ec3\u8ba1\u5212\uff0c\u5305\u62ec\u57fa\u7840\u6a21\u578b\u548c\u5927\u6a21\u578b\u7684\u8bad\u7ec3\u65f6\u95f4\u3002",
                        "sections": []
                    },
                    {
                        "section_number": "6.3",
                        "content_summary": "\u8ba8\u8bba\u4e86\u4f18\u5316\u5668\u7684\u9009\u62e9\u548c\u5b66\u4e60\u7387\u8c03\u6574\u7b56\u7565\u3002",
                        "sections": []
                    },
                    {
                        "section_number": "6.4",
                        "content_summary": "\u8bf4\u660e\u4e86\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u91c7\u7528\u7684\u4e09\u79cd\u6b63\u5219\u5316\u65b9\u6cd5\u3002",
                        "sections": []
                    }
                ]
            },
            {
                "section_number": "7",
                "content_summary": "\u5c55\u793a\u4e86Transformer\u5728\u673a\u5668\u7ffb\u8bd1\u548c\u82f1\u8bed\u6210\u5206\u5206\u6790\u4efb\u52a1\u4e0a\u7684\u7ed3\u679c\uff0c\u5305\u62ec\u6a21\u578b\u6027\u80fd\u3001\u53d8\u4f53\u6a21\u578b\u7684\u5f71\u54cd\u548c\u6cdb\u5316\u80fd\u529b\u3002",
                "sections": [
                    {
                        "section_number": "7.1",
                        "content_summary": "\u4ecb\u7ecd\u4e86\u673a\u5668\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u7684\u7ed3\u679c\uff0c\u5305\u62ec\u6a21\u578b\u6027\u80fd\u548c\u8bad\u7ec3\u6210\u672c\u7684\u6bd4\u8f83\u3002",
                        "sections": []
                    },
                    {
                        "section_number": "7.2",
                        "content_summary": "\u8bc4\u4f30\u4e86Transformer\u4e0d\u540c\u7ec4\u4ef6\u7684\u91cd\u8981\u6027\uff0c\u8ba8\u8bba\u4e86\u6a21\u578b\u53d8\u4f53\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u3002",
                        "sections": []
                    },
                    {
                        "section_number": "7.3",
                        "content_summary": "\u5c55\u793a\u4e86Transformer\u5728\u82f1\u8bed\u6210\u5206\u5206\u6790\u4efb\u52a1\u4e0a\u7684\u8868\u73b0\uff0c\u8bc1\u660e\u4e86\u5176\u6cdb\u5316\u80fd\u529b\u548c\u4f18\u8d8a\u6027\u3002",
                        "sections": []
                    }
                ]
            },
            {
                "section_number": "8",
                "content_summary": "\u603b\u7ed3\u4e86Transformer\u6a21\u578b\u7684\u8d21\u732e\u548c\u672a\u6765\u5c55\u671b\uff0c\u5f3a\u8c03\u4e86\u57fa\u4e8e\u6ce8\u610f\u529b\u7684\u6a21\u578b\u7684\u6f5c\u529b\u548c\u6269\u5c55\u65b9\u5411\u3002",
                "sections": []
            }
        ],
        "overall_assessment": {
            "research_topic": "\u8be5\u7814\u7a76\u4ecb\u7ecd\u4e86Transformer\u6a21\u578b\uff0c\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\uff0c\u6452\u5f03\u4e86\u4f20\u7edf\u7684\u5faa\u73af\u548c\u5377\u79ef\u7ed3\u6784\uff0c\u5728\u673a\u5668\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u53d6\u5f97\u4e86\u663e\u8457\u6210\u679c\u3002",
            "research_outcomes": "\u7814\u7a76\u7ed3\u679c\u8868\u660eTransformer\u6a21\u578b\u5728\u8d28\u91cf\u3001\u8bad\u7ec3\u6548\u7387\u548c\u6cdb\u5316\u80fd\u529b\u65b9\u9762\u4f18\u4e8e\u4f20\u7edf\u6a21\u578b\uff0c\u4e3a\u5e8f\u5217\u8f6c\u6362\u4efb\u52a1\u5e26\u6765\u65b0\u7684\u7a81\u7834\u3002",
            "dataset_description": "",
            "methodology": "\u7814\u7a76\u65b9\u6cd5\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\uff0c\u901a\u8fc7\u81ea\u6ce8\u610f\u529b\u5b9e\u73b0\u8f93\u5165\u548c\u8f93\u51fa\u8868\u793a\u7684\u8ba1\u7b97\uff0c\u907f\u514d\u4e86\u4f20\u7edf\u5faa\u73af\u548c\u5377\u79ef\u7684\u9650\u5236\uff0c\u63d0\u9ad8\u4e86\u5e76\u884c\u6027\u548c\u8bad\u7ec3\u6548\u7387\u3002",
            "innovations": "\u672c\u7814\u7a76\u7684\u521b\u65b0\u70b9\u5728\u4e8e\u63d0\u51fa\u4e86\u5b8c\u5168\u57fa\u4e8e\u6ce8\u610f\u529b\u673a\u5236\u7684Transformer\u6a21\u578b\uff0c\u53d6\u5f97\u4e86\u5728\u673a\u5668\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u7684\u663e\u8457\u6539\u8fdb\u3002",
            "overall_writing_logic": "\u8bba\u6587\u7ed3\u6784\u6e05\u6670\uff0c\u903b\u8f91\u4e25\u8c28\uff0c\u4ece\u4ecb\u7ecd\u80cc\u666f\u5230\u6a21\u578b\u7ec6\u8282\u3001\u8bad\u7ec3\u8fc7\u7a0b\u548c\u5b9e\u9a8c\u7ed3\u679c\u90fd\u6709\u6761\u4e0d\u7d0a\u5730\u5c55\u5f00\u3002",
            "conclusions": "\u7efc\u5408\u8bc4\u4ef7\uff0c\u672c\u7814\u7a76\u5bf9\u5e8f\u5217\u8f6c\u6362\u4efb\u52a1\u7684\u53d1\u5c55\u5177\u6709\u91cd\u8981\u610f\u4e49\uff0c\u63d0\u51fa\u7684Transformer\u6a21\u578b\u5728\u6027\u80fd\u548c\u6548\u7387\u4e0a\u90fd\u6709\u663e\u8457\u63d0\u5347\uff0c\u5177\u6709\u5e7f\u9614\u7684\u5e94\u7528\u524d\u666f\u3002"
        }
    },
    "376910db-02e6-4c63-94b7-4d99e5a536fa_add_sibling": false,
    "b3e608c0-fb3d-49f2-a553-4e93da694334_title": "Attention",
    "12ec6ed0-f7ff-403a-b61c-73174b2e81a7_texts": "Most competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 35].\nHere, the encoder maps an input sequence of symbol representations (x1, ..., xn) to a sequence\nof continuous representations z = (z1, ..., zn). Given z, the decoder then generates an output\nsequence (y1, ..., ym) of symbols one element at a time. At each step the model is auto-regressive\n[10], consuming the previously generated symbols as additional input when generating the next.\n",
    "7feb6a67-87ba-4c5a-90bb-b944ba12823c_texts": "In this work, we presented the Transformer, the first sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\nFor translation tasks, the Transformer can be trained significantly faster than architectures based\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor.\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.",
    "sections_processed": [
        {
            "flag": true,
            "id": "d2d6bf28-9c68-4b74-be87-7a7415921680",
            "title": "Background",
            "texts": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU (16), ByteNet (18) and ConvS2S (9), all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section 3.2.\nSelf-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations. End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-aligned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks.\nTo the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence-aligned RNNs or convolution. In the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as.",
            "sections": []
        },
        {
            "flag": true,
            "id": "12ec6ed0-f7ff-403a-b61c-73174b2e81a7",
            "title": "Model Architecture",
            "texts": "Most competitive neural sequence transduction models have an encoder-decoder structure. Here, the encoder maps an input sequence of symbol representations $(x_1, ..., x_n)$ to a sequence of continuous representations $z = (z_1, ..., z_n)$. Given $z$, the decoder then generates an output sequence $(y_1, ..., y_m)$ of symbols one element at a time. At each step the model is auto-regressive, consuming the previously generated symbols as additional input when generating the next.",
            "sections": [
                {
                    "flag": true,
                    "id": "fc8a6d85-403f-4551-99f8-81b756e9bd5d",
                    "title": "Encoder and Decoder Stacks",
                    "texts": "Encoder: The encoder is composed of a stack of $N = 6$ identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection around each of the two sub-layers, followed by layer normalization. That is, the output of each sub-layer is $LayerNorm(x + Sublayer(x))$, where $Sublayer(x)$ is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension $d_{\\text{model}} = 512$. \n\nDecoder: The decoder is also composed of a stack of $N = 6$ identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for position $i$ can depend only on the known outputs at positions less than $i$.",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "b3e608c0-fb3d-49f2-a553-4e93da694334",
                    "title": "Attention",
                    "texts": "An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.",
                    "sections": [
                        {
                            "flag": true,
                            "id": "dfd8bf32-e2b8-45bf-867e-6701c9d1295e",
                            "title": "Scaled Dot-Product Attention",
                            "texts": "We call our particular attention 'Scaled Dot-Product Attention' (Figure 2).\nThe input consists of queries and keys of dimension $d_k$, and values of dimension $d_v$. We compute the dot products of the query with all keys, divide each by $\\\\sqrt{d_k}$, and apply a softmax function to obtain the weights on the values.\n\nIn practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix $Q$. The keys and values are also packed together into matrices $K$ and $V$. We compute the matrix of outputs as:\n\n$$Attention(Q, K, V) = softmax\\\\left(\\\\frac{QK}{\\\\sqrt{d_k}}\\\\right)V$$\n\nThe two most commonly used attention functions are additive attention, and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of $\\\\sqrt{\\\\frac{1}{d_k}}$. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.\n\nWhile for small values of $d_k$ the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of $d_k$. We suspect that for large values of $d_k$, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients. To counteract this effect, we scale the dot products by $\\\\sqrt{\\\\frac{1}{d_k}}$.",
                            "sections": []
                        },
                        {
                            "flag": true,
                            "id": "d253c4b2-38ff-4706-b2b3-62544fe834fe",
                            "title": "Multi-Head Attention",
                            "texts": "Instead of performing a single attention function with $d_{\\text{model}}$-dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values $h$ times with different, learned linear projections to $d_k$, $d_k$ and $d_v$ dimensions, respectively. On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding $d_v$-dimensional output values. These are concatenated and once again projected, resulting in the final values, as depicted in Figure 2.\nMulti-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.\n$MultiHead(Q, K, V) = \\text{Concat}(head_1, ..., head_h)WO$ where $head_i = \\text{Attention}(QW_i^Q, KW_i^K, VW_i^V)$ where the projections are parameter matrices $W_i^Q \\in \\mathbb{R}^{d_{\\text{model}} \\times d_k}$, $W_i^K \\in \\mathbb{R}^{d_{\\text{model}} \\times d_k}$, $W_i^V \\in \\mathbb{R}^{d_{\\text{model}} \\times d_v}$ and $W_O \\in \\mathbb{R}^{h \\times d_v \\times d_{\\text{model}}}$. In this work we employ $h = 8$ parallel attention layers, or heads. For each of these we use $d_k = d_v = d_{\\text{model}}/h = 64$. Due to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality.",
                            "sections": []
                        },
                        {
                            "flag": true,
                            "id": "150706c0-4671-40c0-9ac7-40d6f6ff6bd9",
                            "title": "Applications of Attention in our Model",
                            "texts": "The Transformer uses multi-head attention in three different ways:\n\u2022 In 'encoder-decoder attention' layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as $[38, 2, 9]$. \n\u2022 The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder. \n\u2022 Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to $-\u221e$) all values in the input of the softmax which correspond to illegal connections. See Figure 2.",
                            "sections": []
                        }
                    ]
                },
                {
                    "flag": true,
                    "id": "6ae9eedf-e5fa-4161-8adf-a0830833084d",
                    "title": "Position-wise Feed-Forward Networks",
                    "texts": "In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between. $$FFN(x) = \\max(0, xW1 + b1)W2 + b2$$ While the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1. The dimensionality of input and output is $d_{\\text{model}} = 512$, and the inner-layer has dimensionality $d_{\\text{ff}} = 2048$.",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "01ef2da7-d53f-435a-89ec-5626cfa7adb6",
                    "title": "Embeddings and Softmax",
                    "texts": "Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension $d_{\\text{model}}$. We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities.\n\nIn our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to [30]. In the embedding layers, we multiply those weights by $\\\\sqrt{d_{\\text{model}}}$.",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "499cfaf8-be29-409d-a9d4-0ed0010ccb24",
                    "title": "Positional Encoding",
                    "texts": "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence.\nTo this end, we add 'positional encodings' to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension $d_{\\text{model}}$ as the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed.\nIn this work, we use sine and cosine functions of different frequencies:\n$PE(pos,2i) = \\sin(pos / 10000^{2i / d_{\\text{model}}})$\n$PE(pos,2i+1) = \\cos(pos / 10000^{2i / d_{\\text{model}}})$\nwhere pos is the position and i is the dimension. That is, each dimension of the positional encoding corresponds to a sinusoid. The wavelengths form a geometric progression from $2\\pi$ to $10000 \\cdot 2\\pi$. We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offset k, $PE_{\\text{pos}+k}$ can be represented as a linear function of $PE_{\\text{pos}}$.\nWe also experimented with using learned positional embeddings instead, and found that the two versions produced nearly identical results. We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training.",
                    "sections": []
                }
            ]
        },
        {
            "flag": true,
            "id": "9a320189-5397-4731-b125-0832b9962cd2",
            "title": "Why Self-Attention",
            "texts": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations $(x_1, ..., x_n)$ to another sequence of equal length $(z_1, ..., z_n)$, with $x_i, z_i \\in \\mathbb{R}^d$, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer. Another is the amount of computation that can be parallelized, as measured by the minimum number of sequential operations required. The third is the path length between long-range dependencies in the network. Learning long-range dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies. Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types. As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requires $O(n)$ sequential operations. In terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence",
            "sections": []
        },
        {
            "flag": true,
            "id": "651fe7c7-d25e-4ad9-87db-7136b645ff5c",
            "title": "Training",
            "texts": "This section describes the training regime for our models.",
            "sections": [
                {
                    "flag": true,
                    "id": "2bcc9650-c262-4e90-918a-e45846ba47c2",
                    "title": "Training Data and Batching",
                    "texts": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding $[3]$, which has a shared source-target vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary $[38]$. Sentence pairs were batched together by approximate sequence length. Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens.",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "ce1fdeda-e1b8-45ec-a0ae-084e29586e7c",
                    "title": "Hardware and Schedule",
                    "texts": "We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using the hyperparameters described throughout the paper, each training step took about $0.4$ seconds. We trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the bottom line of table 3), step time was $1.0$ seconds. The big models were trained for 300,000 steps (3.5 days).",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "3a8dc153-4a94-40f8-af6c-c7e70c29c246",
                    "title": "Optimizer",
                    "texts": "We used the Adam optimizer with $\\\\beta_1 = 0.9$, $\\\\beta_2 = 0.98$ and $\\\\epsilon = 10^{-9}$. We varied the learning rate over the course of training, according to the formula: $lrate = d^{-0.5}_{model} \\\\cdot \\\\min(step_{num}^{-0.5}, step_{num} \\\\cdot warmup_{steps}^{-1.5})$. This corresponds to increasing the learning rate linearly for the first $warmup_{steps}$ training steps, and decreasing it thereafter proportionally to the inverse square root of the step number. We used $warmup_{steps} = 4000$.",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "5314ec67-89bf-4764-a62c-b686af852b4a",
                    "title": "Regularization",
                    "texts": "We employ three types of regularization during training:\nResidual Dropout: We apply dropout to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of $P_{\\text{drop}} = 0.1$.\nLabel Smoothing: During training, we employed label smoothing of value $\\\\epsilon_{\\text{ls}} = 0.1$. This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.",
                    "sections": []
                }
            ]
        },
        {
            "flag": true,
            "id": "54f21048-6d63-4411-b3ea-7cc3b8d0fc40",
            "title": "Results",
            "texts": "In the field of neural machine translation (NMT), ConvS2S is a convolutional sequence-to-sequence model that has shown promising results. ConvS2S utilizes convolutional layers for both the encoder and decoder, allowing it to capture local dependencies efficiently. This architecture has been found to be particularly effective for tasks where long-range dependencies are less critical. By using convolutional layers, ConvS2S can reduce the computational complexity of the model compared to traditional recurrent neural network (RNN) architectures.",
            "sections": [
                {
                    "flag": true,
                    "id": "376910db-02e6-4c63-94b7-4d99e5a536fa",
                    "title": "Machine Translation",
                    "texts": "On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big) in Table 2) outperforms the best previously reported models (including ensembles) by more than $2.0$ BLEU, establishing a new state-of-the-art BLEU score of $28.4$. The configuration of this model is listed in the bottom line of Table 3. Training took $3.5$ days on $8$ P100 GPUs. Even our base model surpasses all previously published models and ensembles, at a fraction of the training cost of any of the competitive models.\n\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of $41.0$, outperforming all of the previously published single models, at less than $1/4$ the training cost of the previous state-of-the-art model. The Transformer (big) model trained for English-to-French used dropout rate $P_{\\text{drop}} = 0.1$, instead of $0.3$.\n\nFor the base models, we used a single model obtained by averaging the last $5$ checkpoints, which were written at $10$-minute intervals. For the big models, we averaged the last $20$ checkpoints. We used beam search with a beam size of $4$ and length penalty $\\\\alpha = 0.6$ $[38]$. These hyperparameters were chosen after experimentation on the development set. We set the maximum output length during inference to input length $+ 50$, but terminate early when possible $[38]$.\n\nTable 2 summarizes our results and compares our translation quality and training costs to other model architectures from the literature. We estimate the number of floating point operations used to train a model by multiplying the training time, the number of GPUs used, and an estimate of the sustained single-precision floating-point capacity of each GPU $5$.",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "7a9b47e2-4e03-47fc-8aec-492940ae91ab",
                    "title": "Model Variations",
                    "texts": "To evaluate the importance of different components of the Transformer, we varied our base model in different ways, measuring the change in performance on English-to-German translation on the development set, newstest2013. We used beam search as described in the previous section, but no checkpoint averaging. We present these results in Table 3.\n\nIn Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions, keeping the amount of computation constant, as described in Section 3.2.2. While single-head attention is $0.9$ BLEU worse than the best setting, quality also drops off with too many heads.\n\nIn Table 3 rows (B), we observe that reducing the attention key size $d_k$ hurts model quality. This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected, bigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our sinusoidal positional encoding with learned positional embeddings, and observe nearly identical results to the base model.",
                    "sections": []
                },
                {
                    "flag": true,
                    "id": "2e6f7c77-ac38-4204-a7fe-9d0e97c3f841",
                    "title": "English Constituency Parsing",
                    "texts": "To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural constraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes. We trained a 4-layer transformer with $d_{\\text{model}} = 1024$ on the Wall Street Journal (WSJ) portion of the Penn Treebank, about 40K training sentences. We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora with approximately 17M sentences. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semi-supervised setting.\n\nWe performed only a small number of experiments to select the dropout, both attention and residual (section 5.4), learning rates and beam size on the Section 22 development set, all other parameters remained unchanged from the English-to-German base translation model. During inference, we increased the maximum output length to input length + 300. We used a beam size of 21 and $\\\\alpha = 0.3$ for both WSJ only and the semi-supervised setting.\n\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar.\n\nIn contrast to RNN sequence-to-sequence models, the Transformer outperforms the BerkeleyParser even when training only on the WSJ training set of 40K sentences.",
                    "sections": []
                }
            ]
        },
        {
            "flag": true,
            "id": "7feb6a67-87ba-4c5a-90bb-b944ba12823c",
            "title": "Conclusion",
            "texts": "In this work, we presented the Transformer, the first sequence transduction model based entirely on attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention.\nFor translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014 English-to-French translation tasks, we achieve a new state of the art. In the former task our best model outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We plan to extend the Transformer to problems involving input and output modalities other than text and to investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs such as images, audio and video. Making generation less sequential is another research goal of ours.\nThe code we used to train and evaluate our models is available at https://github.com/tensorflow/tensor2tensor.\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful comments, corrections and inspiration.",
            "sections": []
        }
    ],
    "dfd8bf32-e2b8-45bf-867e-6701c9d1295e_title_change": "Scaled Dot-Product Attention",
    "ffc44383-eddf-4231-9d4b-a295a90b53f2_texts_change": "[1] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint\narXiv:1607.06450, 2016.\n[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\nlearning to align and translate. CoRR, abs/1409.0473, 2014.\n[3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V. Le. Massive exploration of neural\nmachine translation architectures. CoRR, abs/1703.03906, 2017.\n[4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\nreading. arXiv preprint arXiv:1601.06733, 2016.\n[5] Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. CoRR, abs/1406.1078, 2014.\n[6] Francois Chollet. Xception: Deep learning with depthwise separable convolutions. arXiv\npreprint arXiv:1610.02357, 2016.\n[7] Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. Empirical evaluation\nof gated recurrent neural networks on sequence modeling. CoRR, abs/1412.3555, 2014.\n[8] Chris Dyer, Adhiguna Kuncoro, Miguel Ballesteros, and Noah A. Smith. Recurrent neural\nnetwork grammars. In Proc. of NAACL, 2016.\n[9] Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. Convolutional sequence to sequence learning. arXiv preprint arXiv:1705.03122v2, 2017.\n[10] Alex Graves. Generating sequences with recurrent neural networks. arXiv preprint\narXiv:1308.0850, 2013.\n[11] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition, pages 770\u2013778, 2016.\n[12] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. Gradient flow in\nrecurrent nets: the difficulty of learning long-term dependencies, 2001.\n[13] Sepp Hochreiter and J\u00fcrgen Schmidhuber. Long short-term memory. Neural computation,\n9(8):1735\u20131780, 1997.\n[14] Zhongqiang Huang and Mary Harper. Self-training PCFG grammars with latent annotations\nacross languages. In Proceedings of the 2009 Conference on Empirical Methods in Natural\nLanguage Processing, pages 832\u2013841. ACL, August 2009.\n[15] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploring\nthe limits of language modeling. arXiv preprint arXiv:1602.02410, 2016.\n[16] \u0141ukasz Kaiser and Samy Bengio. Can active memory replace attention? In Advances in Neural\nInformation Processing Systems, (NIPS), 2016.\n[17] \u0141ukasz Kaiser and Ilya Sutskever. Neural GPUs learn algorithms. In International Conference\non Learning Representations (ICLR), 2016.\n[18] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Koray Kavukcuoglu. Neural machine translation in linear time. arXiv preprint arXiv:1610.10099v2,\n2017.\n[19] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. Structured attention networks.\nIn International Conference on Learning Representations, 2017.\n[20] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.\n[21] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. arXiv preprint\narXiv:1703.10722, 2017.\n[22] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. A structured self-attentive sentence embedding. arXiv preprint\narXiv:1703.03130, 2017.\n[23] Minh-Thang Luong, Quoc V. Le, Ilya Sutskever, Oriol Vinyals, and Lukasz Kaiser. Multi-task\nsequence to sequence learning. arXiv preprint arXiv:1511.06114, 2015.\n[24] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attentionbased neural machine translation. arXiv preprint arXiv:1508.04025, 2015.\n[25] Mitchell P Marcus, Mary Ann Marcinkiewicz, and Beatrice Santorini. Building a large annotated\ncorpus of english: The penn treebank. Computational linguistics, 19(2):313\u2013330, 1993.\n[26] David McClosky, Eugene Charniak, and Mark Johnson. Effective self-training for parsing. In\nProceedings of the Human Language Technology Conference of the NAACL, Main Conference,\npages 152\u2013159. ACL, June 2006.\n[27] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. A decomposable attention\nmodel. In Empirical Methods in Natural Language Processing, 2016.\n[28] Romain Paulus, Caiming Xiong, and Richard Socher. A deep reinforced model for abstractive\nsummarization. arXiv preprint arXiv:1705.04304, 2017.\n[29] Slav Petrov, Leon Barrett, Romain Thibaux, and Dan Klein. Learning accurate, compact,\nand interpretable tree annotation. In Proceedings of the 21st International Conference on\nComputational Linguistics and 44th Annual Meeting of the ACL, pages 433\u2013440. ACL, July\n2006.\n[30] Ofir Press and Lior Wolf. Using the output embedding to improve language models. arXiv\npreprint arXiv:1608.05859, 2016.\n[31] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare words\nwith subword units. arXiv preprint arXiv:1508.07909, 2015.\n[32] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. arXiv preprint arXiv:1701.06538, 2017.\n[33] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov. Dropout: a simple way to prevent neural networks from overfitting. Journal of Machine\nLearning Research, 15(1):1929\u20131958, 2014.\n[34] Sainbayar Sukhbaatar, Arthur Szlam, Jason Weston, and Rob Fergus. End-to-end memory\nnetworks. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28, pages 2440\u20132448. Curran Associates,\nInc., 2015.\n[35] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. Sequence to sequence learning with neural\nnetworks. In Advances in Neural Information Processing Systems, pages 3104\u20133112, 2014.\n[36] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\nRethinking the inception architecture for computer vision. CoRR, abs/1512.00567, 2015.\n[37] Vinyals & Kaiser, Koo, Petrov, Sutskever, and Hinton. Grammar as a foreign language. In\nAdvances in Neural Information Processing Systems, 2015.\n[38] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. arXiv preprint\narXiv:1609.08144, 2016.\n[39] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. Deep recurrent models with\nfast-forward connections for neural machine translation. CoRR, abs/1606.04199, 2016.\n[40] Muhua Zhu, Yue Zhang, Wenliang Chen, Min Zhang, and Jingbo Zhu. Fast and accurate\nshift-reduce constituent parsing. In Proceedings of the 51st Annual Meeting of the ACL (Volume\n1: Long Papers), pages 434\u2013443. ACL, August 2013.\n",
    "fc8a6d85-403f-4551-99f8-81b756e9bd5d_delete": false,
    "651fe7c7-d25e-4ad9-87db-7136b645ff5c_texts": "This section describes the training regime for our models.",
    "376910db-02e6-4c63-94b7-4d99e5a536fa_texts": "On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\nOn the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop = 0.1, instead of 0.3.\nFor the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nused beam search with a beam size of 4 and length penalty \u03b1 = 0.6 [38]. These hyperparameters\nwere chosen after experimentation on the development set. We set the maximum output length during\ninference to input length + 50, but terminate early when possible [38].\nTable 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. We estimate the number of floating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision floating-point capacity of each GPU 5.",
    "zh_abstract_processed": "\u4e3b\u5bfc\u7684\u5e8f\u5217\u8f6c\u5bfc\u6a21\u578b\u57fa\u4e8e\u590d\u6742\u7684\u5faa\u73af\u6216\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u5305\u62ec\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u3002\u8868\u73b0\u6700\u4f73\u7684\u6a21\u578b\u8fd8\u901a\u8fc7\u6ce8\u610f\u673a\u5236\u5c06\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u8fde\u63a5\u8d77\u6765\u3002\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u7b80\u5355\u7f51\u7edc\u67b6\u6784\uff0cTransformer\uff0c\u5b8c\u5168\u57fa\u4e8e\u6ce8\u610f\u673a\u5236\uff0c\u6452\u5f03\u4e86\u5faa\u73af\u548c\u5377\u79ef\u3002\u5728\u4e24\u4e2a\u673a\u5668\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u7684\u5b9e\u9a8c\u8868\u660e\uff0c\u8fd9\u4e9b\u6a21\u578b\u5728\u8d28\u91cf\u4e0a\u4f18\u8d8a\uff0c\u540c\u65f6\u66f4\u6613\u5e76\u884c\u5316\uff0c\u5e76\u4e14\u9700\u8981\u66f4\u5c11\u7684\u8bad\u7ec3\u65f6\u95f4\u3002\u6211\u4eec\u7684\u6a21\u578b\u5728WMT 2014\u82f1\u5fb7\u7ffb\u8bd1\u4efb\u52a1\u4e0a\u5b9e\u73b0\u4e86$28.4$ BLEU\u7684\u6210\u7ee9\uff0c\u5728\u73b0\u6709\u6700\u4f73\u7ed3\u679c\u7684\u57fa\u7840\u4e0a\u63d0\u9ad8\u4e86$2$ BLEU\u4ee5\u4e0a\uff0c\u5305\u62ec\u96c6\u6210\u6a21\u578b\u3002\u5728WMT 2014\u82f1\u6cd5\u7ffb\u8bd1\u4efb\u52a1\u4e2d\uff0c\u6211\u4eec\u7684\u6a21\u578b\u5728\u516b\u4e2aGPU\u4e0a\u8bad\u7ec3$3.5$\u5929\u540e\uff0c\u53d6\u5f97\u4e86$41.8$\u7684\u65b0\u7684\u5355\u6a21\u578b\u6700\u5148\u8fdbBLEU\u5206\u6570\uff0c\u8bad\u7ec3\u6210\u672c\u4ec5\u4e3a\u6587\u732e\u4e2d\u6700\u4f73\u6a21\u578b\u7684\u4e00\u5c0f\u90e8\u5206\u3002\u6211\u4eec\u5c55\u793a\u4e86Transformer\u5728\u5176\u4ed6\u4efb\u52a1\u4e0a\u7684\u6cdb\u5316\u80fd\u529b\uff0c\u6210\u529f\u5c06\u5176\u5e94\u7528\u4e8e\u82f1\u8bed\u6210\u5206\u53e5\u6cd5\u5206\u6790\uff0c\u65e0\u8bba\u662f\u5728\u5927\u91cf\u8fd8\u662f\u6709\u9650\u7684\u8bad\u7ec3\u6570\u636e\u4e0a\u3002",
    "01ef2da7-d53f-435a-89ec-5626cfa7adb6_title_change": "Embeddings and Softmax",
    "2bcc9650-c262-4e90-918a-e45846ba47c2_title_change": "Training Data and Batching",
    "zh_title-area": "\u6ce8\u610f\u529b\u5c31\u662f\u4e00\u5207",
    "2e6f7c77-ac38-4204-a7fe-9d0e97c3f841_add_sibling": false,
    "zh_introduction_processed": "\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\uff0c\u957f\u77ed\u671f\u8bb0\u5fc6\u548c\u95e8\u63a7\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u7279\u522b\u662f\uff0c\u5728\u5e8f\u5217\u5efa\u6a21\u548c\u8f6c\u5bfc\u95ee\u9898\uff08\u5982\u8bed\u8a00\u5efa\u6a21\u548c\u673a\u5668\u7ffb\u8bd1\uff09\u4e2d\uff0c\u5df2\u7ecf\u88ab\u7262\u56fa\u5730\u786e\u7acb\u4e3a\u6700\u5148\u8fdb\u7684\u65b9\u6cd5\u3002\u6b64\u540e\uff0c\u8bb8\u591a\u52aa\u529b\u7ee7\u7eed\u63a8\u52a8\u5faa\u73af\u8bed\u8a00\u6a21\u578b\u548c\u7f16\u7801\u5668-\u89e3\u7801\u5668\u67b6\u6784\u7684\u8fb9\u754c\u3002\u5faa\u73af\u6a21\u578b\u901a\u5e38\u6cbf\u7740\u8f93\u5165\u548c\u8f93\u51fa\u5e8f\u5217\u7684\u7b26\u53f7\u4f4d\u7f6e\u56e0\u5b50\u5316\u8ba1\u7b97\u3002\u5c06\u4f4d\u7f6e\u4e0e\u8ba1\u7b97\u65f6\u95f4\u6b65\u9aa4\u5bf9\u9f50\uff0c\u5b83\u4eec\u751f\u6210\u4e00\u7cfb\u5217\u9690\u85cf\u72b6\u6001 $h_t$\uff0c\u4f5c\u4e3a\u524d\u4e00\u4e2a\u9690\u85cf\u72b6\u6001 $h_{t-1}$ \u548c\u4f4d\u7f6e $t$ \u7684\u8f93\u5165\u7684\u51fd\u6570\u3002\u8fd9\u79cd\u56fa\u6709\u7684\u987a\u5e8f\u6027\u8d28\u6392\u9664\u4e86\u5728\u8bad\u7ec3\u793a\u4f8b\u5185\u7684\u5e76\u884c\u5316\uff0c\u8fd9\u5728\u8f83\u957f\u7684\u5e8f\u5217\u957f\u5ea6\u65f6\u53d8\u5f97\u81f3\u5173\u91cd\u8981\uff0c\u56e0\u4e3a\u5185\u5b58\u9650\u5236\u9650\u5236\u4e86\u8de8\u793a\u4f8b\u7684\u6279\u5904\u7406\u3002\u6700\u8fd1\u7684\u5de5\u4f5c\u901a\u8fc7\u56e0\u5b50\u5316\u6280\u5de7\u548c\u6761\u4ef6\u8ba1\u7b97\u5b9e\u73b0\u4e86\u8ba1\u7b97\u6548\u7387\u7684\u663e\u7740\u63d0\u9ad8\uff0c\u540c\u65f6\u5728\u540e\u8005\u7684\u60c5\u51b5\u4e0b\u4e5f\u63d0\u9ad8\u4e86\u6a21\u578b\u6027\u80fd\u3002\u7136\u800c\uff0c\u987a\u5e8f\u8ba1\u7b97\u7684\u57fa\u672c\u7ea6\u675f\u4ecd\u7136\u5b58\u5728\u3002\u6ce8\u610f\u673a\u5236\u5df2\u7ecf\u6210\u4e3a\u5404\u79cd\u4efb\u52a1\u4e2d\u5f15\u4eba\u6ce8\u76ee\u7684\u5e8f\u5217\u5efa\u6a21\u548c\u8f6c\u5bfc\u6a21\u578b\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u5141\u8bb8\u5bf9\u4f9d\u8d56\u5173\u7cfb\u8fdb\u884c\u5efa\u6a21\uff0c\u800c\u4e0d\u8003\u8651\u5b83\u4eec\u5728\u8f93\u5165\u6216\u8f93\u51fa\u5e8f\u5217\u4e2d\u7684\u8ddd\u79bb\u3002\u7136\u800c\uff0c\u5728\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u6ce8\u610f\u673a\u5236\u4e0e\u5faa\u73af\u7f51\u7edc\u4e00\u8d77\u4f7f\u7528\u3002\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u63d0\u51fa\u4e86Transformer\uff0c\u8fd9\u662f\u4e00\u79cd\u6a21\u578b\u67b6\u6784\uff0c\u6452\u5f03\u4e86\u5faa\u73af\uff0c\u800c\u662f\u5b8c\u5168\u4f9d\u8d56\u4e8e\u6ce8\u610f\u673a\u5236\u6765\u7ed8\u5236\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u7684\u5168\u5c40\u4f9d\u8d56\u5173\u7cfb\u3002Transformer\u5141\u8bb8\u66f4\u591a\u7684\u5e76\u884c\u5316\uff0c\u5e76\u4e14\u5728\u4ec5\u7ecf\u8fc7\u5728\u516b\u4e2aP100 GPU\u4e0a\u8bad\u7ec3\u5341\u4e8c\u5c0f\u65f6\u540e\uff0c\u5c31\u53ef\u4ee5\u8fbe\u5230\u7ffb\u8bd1\u8d28\u91cf\u7684\u6700\u65b0\u6c34\u5e73\u3002",
    "d2d6bf28-9c68-4b74-be87-7a7415921680_add_child": false,
    "2e6f7c77-ac38-4204-a7fe-9d0e97c3f841_delete": false,
    "fc8a6d85-403f-4551-99f8-81b756e9bd5d_texts": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection [11] around each of\nthe two sub-layers, followed by layer normalization [1]. That is, the output of each sub-layer is\nLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512.\nDecoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position i can depend only on the known outputs at positions less than i.",
    "499cfaf8-be29-409d-a9d4-0ed0010ccb24_texts_change": "Since our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the\nbottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. There are many choices of positional encodings,\nlearned and fixed [9].\nIn this work, we use sine and cosine functions of different frequencies:\nP E(pos,2i) = sin(pos/100002i/dmodel)\nP E(pos,2i+1) = cos(pos/100002i/dmodel)\nwhere pos is the position and i is the dimension. That is, each dimension of the positional encoding\ncorresponds to a sinusoid. The wavelengths form a geometric progression from 2\u03c0 to 10000 \u00b7 2\u03c0. We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any fixed offset k, P Epos+k can be represented as a linear function of\nP E\npos.\nWe also experimented with using learned positional embeddings [9] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training",
    "54f21048-6d63-4411-b3ea-7cc3b8d0fc40_title_change": "Results",
    "api_flag": true,
    "dfd8bf32-e2b8-45bf-867e-6701c9d1295e_delete": false,
    "150706c0-4671-40c0-9ac7-40d6f6ff6bd9_title": "Applications of Attention in our Model",
    "6ae9eedf-e5fa-4161-8adf-a0830833084d_delete": false,
    "publish_time-area": "2023.8.2",
    "54f21048-6d63-4411-b3ea-7cc3b8d0fc40_delete": false,
    "b3e608c0-fb3d-49f2-a553-4e93da694334_delete": false,
    "fc8a6d85-403f-4551-99f8-81b756e9bd5d_add_sibling": false,
    "7feb6a67-87ba-4c5a-90bb-b944ba12823c_title_change": "Conclusion",
    "2bcc9650-c262-4e90-918a-e45846ba47c2_delete": false,
    "zh_keywords-area": "\u8bf7\u8f93\u5165\u8981\u7ffb\u8bd1\u7684\u6587\u672c\u3002",
    "5314ec67-89bf-4764-a62c-b686af852b4a_delete": false,
    "9a320189-5397-4731-b125-0832b9962cd2_delete": false,
    "651fe7c7-d25e-4ad9-87db-7136b645ff5c_title_change": "Training",
    "12ec6ed0-f7ff-403a-b61c-73174b2e81a7_title": "Model Architecture",
    "12ec6ed0-f7ff-403a-b61c-73174b2e81a7_add_child": false,
    "2e6f7c77-ac38-4204-a7fe-9d0e97c3f841_title_change": "English Constituency Parsing",
    "zh_institutes-area": "Google Brain\uff0cGoogle Research\uff0c\u591a\u4f26\u591a\u5927\u5b66",
    "d2d6bf28-9c68-4b74-be87-7a7415921680_texts_change": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[16], ByteNet [18] and ConvS2S [9], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes\nit more difficult to learn dependencies between distant positions [12]. In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\nSelf-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 27, 28, 22].\nEnd-to-end memory networks are based on a recurrent attention mechanism instead of sequencealigned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [34].\nTo the best of our knowledge, however, the Transformer is the first transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequencealigned RNNs or convolution. In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [17, 18] and [9]",
    "6ae9eedf-e5fa-4161-8adf-a0830833084d_title": "Position-wise Feed-Forward Networks",
    "01ef2da7-d53f-435a-89ec-5626cfa7adb6_title": "Embeddings and Softmax",
    "d2d6bf28-9c68-4b74-be87-7a7415921680_delete": false,
    "ce1fdeda-e1b8-45ec-a0ae-084e29586e7c_delete": false,
    "api_key-area": "sk-HuTWQZvHSLfgi3l51dB78851B4Da46Ba89796dFf565688Ca",
    "7a9b47e2-4e03-47fc-8aec-492940ae91ab_delete": false,
    "chatgpt_api_button": false,
    "499cfaf8-be29-409d-a9d4-0ed0010ccb24_add_sibling": false,
    "3a8dc153-4a94-40f8-af6c-c7e70c29c246_texts": "We used the Adam optimizer [20] with \u03b21 = 0.9, \u03b22 = 0.98 and \u03f5 = 10\u22129. We varied the learning\nrate over the course of training, according to the formula:\nlrate = d\u22120.5\nmodel \u00b7 min(step_num\u22120.5, step_num \u00b7 warmup_steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the first warmup_steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. We used\nwarmup_steps = 4000.",
    "651fe7c7-d25e-4ad9-87db-7136b645ff5c_add_sibling": false,
    "fc8a6d85-403f-4551-99f8-81b756e9bd5d_texts_change": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection [11] around each of\nthe two sub-layers, followed by layer normalization [1]. That is, the output of each sub-layer is\nLayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512.\nDecoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position i can depend only on the known outputs at positions less than i.",
    "150706c0-4671-40c0-9ac7-40d6f6ff6bd9_texts_change": "The Transformer uses multi-head attention in three different ways:\n\u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence. This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[38, 2, 9].\n\u2022 The encoder contains self-attention layers. In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n\u2022 Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. We need to prevent leftward\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. See Figure 2.",
    "150706c0-4671-40c0-9ac7-40d6f6ff6bd9_add_child": false,
    "dfd8bf32-e2b8-45bf-867e-6701c9d1295e_add_child": false,
    "2e6f7c77-ac38-4204-a7fe-9d0e97c3f841_texts_change": "To evaluate if the Transformer can generalize to other tasks we performed experiments on English\nconstituency parsing. This task presents specific challenges: the output is subject to strong structural\nconstraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence\nmodels have not been able to attain state-of-the-art results in small-data regimes [37].\nWe trained a 4-layer transformer with dmodel = 1024 on the Wall Street Journal (WSJ) portion of the\nPenn Treebank [25], about 40K training sentences. We also trained it in a semi-supervised setting,\nusing the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences\n[37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens\nfor the semi-supervised setting.\nWe performed only a small number of experiments to select the dropout, both attention and residual\n(section 5.4), learning rates and beam size on the Section 22 development set, all other parameters\nremained unchanged from the English-to-German base translation model. During inference, we\nincreased the maximum output length to input length + 300. We used a beam size of 21 and \u03b1 = 0.3\nfor both WSJ only and the semi-supervised setting.\nOur results in Table 4 show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the\nRecurrent Neural Network Grammar [8].\nIn contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the BerkeleyParser [29] even when training only on the WSJ training set of 40K sentences.",
    "54f21048-6d63-4411-b3ea-7cc3b8d0fc40_title": "Results",
    "d253c4b2-38ff-4706-b2b3-62544fe834fe_title_change": "Multi-Head Attention",
    "499cfaf8-be29-409d-a9d4-0ed0010ccb24_delete": false,
    "6ae9eedf-e5fa-4161-8adf-a0830833084d_add_sibling": false,
    "ce1fdeda-e1b8-45ec-a0ae-084e29586e7c_add_child": false,
    "2bcc9650-c262-4e90-918a-e45846ba47c2_add_child": false,
    "3a8dc153-4a94-40f8-af6c-c7e70c29c246_title": "Optimizer",
    "dfd8bf32-e2b8-45bf-867e-6701c9d1295e_add_sibling": false,
    "7feb6a67-87ba-4c5a-90bb-b944ba12823c_texts_change": "In this work, we presented the Transformer, the first sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\nFor translation tasks, the Transformer can be trained significantly faster than architectures based\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.\nWe are excited about the future of attention-based models and plan to apply them to other tasks. We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\nThe code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor.\nAcknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.",
    "150706c0-4671-40c0-9ac7-40d6f6ff6bd9_delete": false,
    "651fe7c7-d25e-4ad9-87db-7136b645ff5c_add_child": false,
    "api_key": ""
}